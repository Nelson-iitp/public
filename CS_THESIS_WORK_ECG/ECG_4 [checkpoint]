{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ECG_4 [checkpoint]","provenance":[{"file_id":"1lrrAtRYTa81trESTBH5XOaltqB6cbOhs","timestamp":1582476241625},{"file_id":"1iSq0-ZzH31y7362OMq2pvlT17n02Gs7z","timestamp":1582475247683}],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1BdpxOQivgeLH-bRZHEceOXyZaBLzRt0I","authorship_tag":"ABX9TyNCAEaIB49jk1SW7XSGJv/q"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab_type":"code","outputId":"be214c05-c204-42ed-87c5-56d5d272e4a8","executionInfo":{"status":"ok","timestamp":1582491009633,"user_tz":-330,"elapsed":5331,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"id":"tyLD8tg3Nh3q","colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["\n","# plot record annotations ==================================================================================\n","plt.figure(0, figsize=(240,4),dpi=100)\n","plt.ylim(-0.2*g_COUNT-1, 1.5 )\n","plt.xlim(-10, 1830 )\n","aa = plt.axes()\n","ax = aa.get_xaxis()\n","ay = aa.get_yaxis()\n","ax.set_major_locator(ticker.MultipleLocator(5))\n","ay.set_visible(False)\n","plt.grid(axis='x' )\n","\n","for gi in range(0,g_COUNT):\n","    samp_dict = ant_sm[ant_lm==gi]\n","    plt.scatter(np.multiply(samp_dict,[1/dbs.srate]),np.subtract(np.multiply(ant_lm[ant_lm==gi],[-0.2]),1),color=g_COLORS[gi],marker='.',label=g_LABELS[gi]+' ['+str(len(samp_dict))+']')\n","\n","\n","#------------------------------ CUSTOM ANOTATIONS HERE ------------------------------\n","#cust_label = 'Q'\n","#ps_x = np.multiply(ant_s[ant_l==cust_label],[1/dbs.srate])\n","#ps_y = np.subtract(np.zeros(len(ant_l[ant_l==cust_label])),[0.75])\n","#plt.scatter(ps_x,ps_y,color='blue',marker='o',label='Custom: ' + cust_label+' ['+str(len(ps_x))+']')\n","#------------------------------ CUSTOM ANOTATIONS HERE ------------------------------\n","\n","\n","#------------------------------ NON BEAT ANOTATIONS HERE ------------------------------\n","ps_x = np.multiply(ant_s[ant_l=='x'],[1/dbs.srate])\n","ps_y = np.subtract(np.zeros(len(ant_l[ant_l=='x'])),[0.25])\n","plt.scatter(ps_x,ps_y,color='black',marker='x',label='Non-Cond P-wave'+' ['+str(len(ps_x))+']')\n","\n","ps_x = np.multiply(ant_s[ant_l=='|'],[1/dbs.srate])\n","ps_y = np.subtract(np.zeros(len(ant_l[ant_l=='|'])),[0.25])\n","plt.scatter(ps_x,ps_y,color='black',marker='|',label='QRS-like complex'+' ['+str(len(ps_x))+']')\n","\n","ps_x = np.multiply(ant_s[ant_l=='~'],[1/dbs.srate])\n","ps_y = np.subtract(np.zeros(len(ant_l[ant_l=='~'])),[0.5])\n","plt.scatter(ps_x,ps_y,color='red',marker='x',label='~Quality change~'+' ['+str(len(ps_x))+']')\n","\n","ps_x = np.multiply(ant_s[ant_l=='\"'],[1/dbs.srate])\n","ps_y = np.subtract(np.zeros(len(ant_l[ant_l=='\"'])),[0.5])\n","plt.scatter(ps_x,ps_y,color='black',marker='+',label='Commnet'+' ['+str(len(ps_x))+']')\n","\n","ps_x = np.multiply(ant_s[ant_l=='+'],[1/dbs.srate])\n","ps_y = np.subtract(np.zeros(len(ant_l[ant_l=='+'])),[0.5])\n","plt.scatter(ps_x,ps_y,color='green',marker='>',label='Rhythm change'+' ['+str(len(ps_x))+']')\n","#------------------------------ NON BEAT ANOTATIONS HERE ------------------------------\n","\n","\n","# get N B A density ==================================================================================\n","den_N = np.zeros((1800,3),dtype=float) #density in 10 ms window\n","for i in range(0, len(den_N)):\n","    temp = ant2m[(ant_sm>(i-5)*selrec.db.srate) & (ant_sm<(i+5)*selrec.db.srate)] [:,1]\n","    den_N[i,0]=len(temp[temp==0]) / len(temp) \n","    den_N[i,1]=len(temp[temp==1]) / len(temp)  \n","    den_N[i,2]=len(temp[temp==2]) / len(temp)  \n","\n","# plot density\n","plt.plot(den_N[:,0],color= 'green',linewidth=0.8)\n","plt.plot(den_N[:,1],color= 'gold',linewidth=0.8)\n","plt.plot(den_N[:,2],color= 'red',linewidth=0.8)\n","# get N B A density ==================================================================================\n","\n","\n","plt.title(selrec.name + ':: Total peaks = '+str(len(ant2m)))\n","plt.legend()\n","\n","plt.savefig('/content/drive/My Drive/Masters/workdir/ecg_data/db_npy/data_png/'+selrec.name +'.png')\n","plt.close()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"txEmXPpaV5Dx","colab_type":"code","outputId":"fccfb558-602c-4392-da53-104f544a7c8f","executionInfo":{"status":"ok","timestamp":1582566314029,"user_tz":-330,"elapsed":4143,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\n","%reset"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Once deleted, variables cannot be recovered. Proceed (y/[n])? y\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Rmo_c2oWiCPc","colab_type":"text"},"source":["# GLOBAL DECLEARATIONS"]},{"cell_type":"code","metadata":{"id":"pGF7KsWlWjKU","colab_type":"code","outputId":"ef75da08-d5a3-47b0-d730-6f181cbcab7e","executionInfo":{"status":"ok","timestamp":1582682089256,"user_tz":-330,"elapsed":1558,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":943}},"source":["import datetime\n","import os\n","import random\n","import numpy as np\n","from scipy.io import loadmat\n","from scipy.signal import medfilt\n","import pywt\n","from pywt import wavedec\n","import matplotlib\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","import matplotlib.ticker as ticker\n","# dbname_mat folders exist here\n","global_dir = '/content/drive/My Drive/Masters/workdir/ecg_data'\n","print('GLOBAL DATA DIR :: '+global_dir)\n","\n","# dbname_npy shoud exsist\n","global_npydir = os.path.join(global_dir, 'db_npy') #global_dir + 'db_npy/'\n","print('GLOBAL NPY DIR :: '+global_npydir)\n","\n","global_datadir = os.path.join(global_npydir, 'data_npy') \n","print('GLOBAL DATA DIR :: '+global_datadir)\n","\n","# global annotation and mapping, common for all ECG from https://physionet.org/about/database/\n","global_annot = os.path.join(global_dir, 'annotations.txt' )  \n","print('GLOBAL ANNOTATIONS :: '+global_annot)\n","# view this file on drive :: https://drive.google.com/open?id=1edhzatX7D3Uo03-d08Lksp807ULlcpgo\n","\n","#===================================================================================================================\n","# load MIT annotation mapping  \n","\n","g_MIT_AMAP_data = np.loadtxt(global_annot, dtype='str',delimiter=\"\\t\")\n","g_MIT_AMAP={}\n","for a in g_MIT_AMAP_data:\n","    g_MIT_AMAP[a[0]]= int(a[1])\n","    #a[0] = orignal mit label (char)\n","    #a[1] = mapped integer label (int)\n","    #a[2] = description (str)\n","\n","map_keys = g_MIT_AMAP.keys()\n","map_vals = g_MIT_AMAP.values()\n","\n","print(map_keys)\n","print(' :: STD LABEL MAPPING :: ')\n","for k in map_keys:\n","    print(k+'\\t'+str(g_MIT_AMAP[k]))\n","#print(g_MIT_AMAP)\n","\n","maxlabels=max(map_vals)+1\n","print('Max DB Label = '+ str(maxlabels))\n","\n","g_COLORS = ['green','gold','red']\n","g_LABELS = np.array(['N','B','A'])\n","g_COUNT = len(g_LABELS)\n","print('STD Labels : ' + str(g_LABELS))\n","print('MAX STD Label = '+ str(g_COUNT))\n","#===================================================================================================================\n","\n","print(datetime.datetime.now())\n","def mapstd(peak_label):\n","    res = np.zeros(len(peak_label),dtype='int')\n","    for i in range(0, len(peak_label)):\n","        res[i] = g_MIT_AMAP[peak_label[i]]\n","    return res"],"execution_count":23,"outputs":[{"output_type":"stream","text":["GLOBAL DATA DIR :: /content/drive/My Drive/Masters/workdir/ecg_data\n","GLOBAL NPY DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/db_npy\n","GLOBAL DATA DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/db_npy/data_npy\n","GLOBAL ANNOTATIONS :: /content/drive/My Drive/Masters/workdir/ecg_data/annotations.txt\n","dict_keys(['N', 'L', 'R', 'B', 'A', 'a', 'J', 'S', 'V', 'r', 'F', 'e', 'j', 'n', 'E', '/', 'f', 'Q', '?', '[', '!', ']', 'x', '(', ')', 'p', 't', 'u', '`', \"'\", '^', '|', '~', '+', 's', 'T', '*', 'D', '=', '\"', '@'])\n"," :: STD LABEL MAPPING :: \n","N\t0\n","L\t1\n","R\t1\n","B\t1\n","A\t2\n","a\t2\n","J\t2\n","S\t2\n","V\t2\n","r\t2\n","F\t2\n","e\t2\n","j\t2\n","n\t2\n","E\t2\n","/\t-1\n","f\t-1\n","Q\t2\n","?\t-1\n","[\t-2\n","!\t2\n","]\t-2\n","x\t-2\n","(\t-2\n",")\t-2\n","p\t-2\n","t\t-2\n","u\t-2\n","`\t-2\n","'\t-2\n","^\t-2\n","|\t-2\n","~\t-2\n","+\t-2\n","s\t-2\n","T\t-2\n","*\t-2\n","D\t-2\n","=\t-2\n","\"\t-2\n","@\t-2\n","Max DB Label = 3\n","STD Labels : ['N' 'B' 'A']\n","MAX STD Label = 3\n","2020-02-26 01:54:48.492755\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vNr_Sl-piJdV","colab_type":"text"},"source":["# CLASS DEFINITIONS"]},{"cell_type":"code","metadata":{"id":"_g9AKmO-ONrm","colab_type":"code","colab":{}},"source":["\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# CLASS ecg_record : represents one ECG Record in any database\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","class ecg_record:\n","\n","    def __init__(self, db, recname):\n","        self.db = db                                # class:{ecg_db}    object this record belongs to\n","        self.rec = recname                          # string            name of this record\n","        self.name = db.name + '_'+ recname          # string            full name including db.name\n","\n","        #self.dirs = db.get_dirs(recname)            # dict              dict of npy data file names to be loaded in data dict used in self.load_data('key')\n","        self.data = {}                              # dict              dict of npy data file content used in self.read_data('key')\n","\n","        # find the gain\n","        self.info = get_minfo(os.path.join(db.dir_mat,recname+'m.hea'))  # head has this info at lead2's index\n","        self.gain = int(self.info[db.lead2_index+1].split()[2].split('/')[0])\n","        self.print_info()\n","    \n","    def print_info(self):\n","        for i in range(0,len(self.info)):\n","            print(str(i)+'\\t'+str(self.info[i]))\n","    def read_data(self, data_type):\n","        return self.data[data_type] #= np.load(self.dirs[s])\n","\n","    def load_data(self, data_type):\n","        self.data[data_type] = np.load(os.path.join(self.db.dir_npy, self.rec + '_'+data_type+'.npy'))\n","        return self.data[data_type]\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# CLASS ecg_db : represents one ECG database\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","class ecg_db:\n","    def __init__(self, dbname,  sampling_rate, lead2_index):\n","        print('\\nInitailze new ecg database ... ')\n","        self.name = dbname  #str\n","        self.srate = sampling_rate #int\n","        self.lead2_index = lead2_index #int\n","        #self.dir_raw = global_dir + dbname+'_raw/' #str\n","        self.dir_mat = os.path.join(global_dir , dbname+'_mat') #str\n","        self.dir_npy = os.path.join(global_npydir , dbname+'_npy') #str\n","        self.recs = set(np.loadtxt(os.path.join(self.dir_mat,'RECORDS'), dtype='str',delimiter=\"\\n\")) #set\n","        self.info()\n","\n","    def info(self):\n","        print( 'DB NAME :: '+ self.name)\n","        print( 'MAT DIR :: ' + self.dir_mat )\n","        print( 'NPY DIR :: ' + self.dir_npy )\n","        print( 'S_RATE :: ' + str(self.srate))\n","        print( 'LEAD2 INDEX  :: ' + str(self.lead2_index))\n","        print( 'RECORD SET :: [' +str(len(self.recs))+'] ' + str(self.recs) )\n","        return 0\n","\n","    def get_record(self,rec):\n","        return ecg_record(self,rec)\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# Pre processing Functions\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","def denoise_signal(X, dwt_transform, dlevels, cutoff_low, cutoff_high):\n","    coeffs = wavedec(X, dwt_transform, level=dlevels)   # wavelet transform 'bior4.4'\n","    # scale 0 to cutoff_low \n","    for ca in range(0,cutoff_low):\n","        coeffs[ca]=np.multiply(coeffs[ca],[0.0])\n","    # scale cutoff_high to end\n","    for ca in range(cutoff_high, len(coeffs)):\n","        coeffs[ca]=np.multiply(coeffs[ca],[0.0])\n","    Y = pywt.waverec(coeffs, dwt_transform) # inverse wavelet transform\n","    return Y  \n","\n","def get_median_filter_width(sampling_rate, duration):\n","    res = int( sampling_rate*duration )\n","    if res % 2 == 0 : # is even\n","        res+=1 # make odd\n","    return res\n","\n","def filter_signal(X,mfltrs_array):\n","    X0 = X  #read orignal signal\n","    for mi in range(0,len(mfltrs_array)):\n","        X0 = medfilt(X0,mfltrs_array[mi]) # apply median filter one by one on top of each other\n","    X0 = np.subtract(X,X0)  # finally subtract from orignal signal\n","    return X0\n","\n","def get_minfo(minfo_path):\n","    f = open(minfo_path,'r')\n","    ls = f.readlines()\n","    f.close()\n","    #la = ls[minfo_line_index].split()    #I67m.mat 16+192 623/mV 16 0 4441 1894 0 II\n","    return ls # gain at 2 baseline at 4\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# Database Building Functions\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# 1 Build Annotations :: a.txt -> ant.npy\n","def build_db_ants(self_db, output_postfix):  \n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","    xs=len(self_db.recs)\n","    #xc=1\n","    print('\\nBEGIN TASK :: Build annotations for ' + str(xs)+ ' records')\n","    print('REC\\tFound\\tKnown\\tUnknown' )\n","    for rec in self_db.recs:\n","        #print('REC: '+rec+ '...'+str(xc)+ ' of '+ str(xs))\n","        #xc+=1\n","        ants = np.loadtxt(os.path.join(self_db.dir_mat , rec + 'a.txt'), dtype='str', delimiter= '\\n', skiprows = 1)\n","        #print('\\tFound Annotations\\t'+str(len(ants)))\n","        antsnpy = np.zeros((0,2),dtype='str')\n","        #print('  annotations found '+str(len(ants)))\n","        for i in range(0,len(ants)):\n","            a_a = ants[i].split()\n","            a_sample = a_a[1]\n","            a_label = a_a[2]\n","            if (a_label in map_keys):\n","                antsnpy = np.vstack((antsnpy,np.array([a_sample,a_label]))) # sample,label str\n","            else:\n","                print('\\tWARNING :: Unknown annotation \"'+a_label+'\" found at [' +a_sample+ '] in file a.txt, skipping....')\n","        \n","        adf =  len(ants) - len(antsnpy) \n","        #print('\\tKnown Annotations\\t'+str(len(antsnpy)))\n","        # print('\\tUnknown Annotations\\t'+str(adf))\n","        print(rec + '\\t'+ str(len(ants)) + '\\t'+str(len(antsnpy))+'\\t' + str(adf) )\n","        # save for this record\n","        np.save(os.path.join(self_db.dir_npy , rec+ '_'+output_postfix+'.npy'), antsnpy)\n","        #print('\\tSaved at \"'+save_loc+'\"')\n","    print('\\nEND TASK :: Build annotations for ' + str(xs)+ ' records')\n","    return 0\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# 2 Map Annotations :: ant.npy -> antm.npy\n","def map_db_ants(self_db, g_map, input_postfix, output_postfix):\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","    #global g_MIT_AMAP\n","    xs=len(self_db.recs)\n","    #xc=1\n","    print('\\nTASK :: MAP annotations for ' + str(xs)+ ' records :: using prefix '+ '*_'+output_postfix+'.npy')\n","    print('REC\\tFound\\tMapped\\tUnmapped' )\n","    for rec in self_db.recs:\n","        #print('REC: '+rec+ '...'+str(xc)+ ' of '+ str(xs))\n","        #xc+=1\n","\n","        ants = np.load(os.path.join( self_db.dir_npy , rec + '_'+input_postfix+'.npy'))\n","\n","        #print('\\tFound Annotations\\t'+str(len(ants)))\n","        antsmap = np.zeros((0,2),dtype='int')\n","        #print('  annotations found '+str(len(ants)))\n","        for i in range(0,len(ants)):\n","            a_sample = int(ants[i][0])\n","            a_label = g_map[ants[i][1]]\n","            if a_label>=0:\n","                antsmap = np.vstack((antsmap, np.array([a_sample,a_label])))\n","\n","        adf =  len(ants) - len(antsmap) \n","        #print('\\tMapped Annotations\\t'+str(len(antsmap)))\n","        #print('\\tUnmapped Annotations\\t'+str(adf))\n","        print(rec + '\\t'+ str(len(ants)) + '\\t'+str(len(antsmap))+'\\t' + str(adf) )\n","        # save for this record\n","        np.save(os.path.join(  self_db.dir_npy , rec + '_'+output_postfix+'.npy'), antsmap)\n","        #print('\\tSaved at \"'+save_loc+'\"')\n","    print('\\nEND TASK :: MAP annotations for ' + str(xs)+ ' records')\n","    return 0\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# 3 Extract Raw lead2 signal :: m.mat[lead2] -> raw2.npy\n","def build_db_signal(self_db, output_postfix):  # saves xm.mat[lead2] --> x_raw2.npy\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","    xs=len(self_db.recs)\n","    xc=0\n","    print('\\nBEGIN TASK :: Save lead2 signal data for ' + str(xs)+ ' records')\n","    for rec in self_db.recs:\n","        xc+=1\n","        print('Rec: '+rec+ ' ... '+ str(xc)+' of '+ str(xs))\n","        mat_signal = loadmat(os.path.join( self_db.dir_mat , rec + 'm.mat'))['val'][self_db.lead2_index]\n","        np.save(os.path.join( self_db.dir_npy , rec + '_'+output_postfix+'.npy'), mat_signal)    \n","    print('END TASK :: Save lead2 signal data for ' + str(xs)+ ' records')\n","    return 0\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# 4 Filter Raw/Denoised signal :: raw2.npy -> med2.npy or den2.npy -> rmd2.npy\n","def filter_db_signal(self_db, ms_flt_array, input_postfix, output_postfix): \n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","    xs=len(self_db.recs)\n","    xc=0\n","    mfa = np.zeros(len(ms_flt_array), dtype='int')\n","    #print('fun')\n","    for i in range(0, len(ms_flt_array)):\n","        mfa[i] = get_median_filter_width(self_db.srate,ms_flt_array[i])\n","        #print('loop')\n","    print('\\nBEGIN TASK :: filer lead2 signal data for ' + str(xs)+ ' records:' + input_postfix + ' --> ' + output_postfix)\n","    for rec in self_db.recs:\n","        xc+=1\n","        print('Rec: '+rec+ ' ... '+ str(xc)+' of '+ str(xs))\n","        X = np.load(os.path.join( self_db.dir_npy , rec + '_'+input_postfix+'.npy')) #np.save(rec_fnpy + '_raw2.npy', mat_signal) \n","        X_med2 = filter_signal(X, mfa)\n","        np.save(os.path.join( self_db.dir_npy , rec + '_'+output_postfix+'.npy'),X_med2) # save a copy of (median filtered ) signal = r,m  \n","        #----------------------------------------------------------------------         \n","    print('END TASK :: filer lead2 signal data for ' + str(xs)+ ' records')\n","    return 0\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","\n","\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","# 5 Denoise Raw/Filtered signal :: med2.npy -> rdm2.npy or raw2.npy -> den2.npy\n","def denoise_db_signal(self_db, dwt_transform, dlevels, cutoff_low, cutoff_high, input_postfix, output_postfix):\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","    xs=len(self_db.recs)\n","    xc=0\n","    \n","    print('\\nBEGIN TASK :: denoising lead2 signal data for ' + str(xs)+ ' records:' + input_postfix + ' --> ' + output_postfix)\n","    for rec in self_db.recs:\n","        xc+=1\n","        print('Rec: '+rec+ ' ... '+ str(xc)+' of '+ str(xs))\n","        X = np.load(os.path.join( self_db.dir_npy , rec + '_'+input_postfix+'.npy') ) # np.load(self_db.dir_npy + rec + '_raw2.npy')\n","        X_rlt2 = denoise_signal(X,dwt_transform, dlevels, cutoff_low, cutoff_high )\n","        np.save(os.path.join( self_db.dir_npy , rec + '_'+output_postfix+'.npy'),X_rlt2) # save a copy of (only denoised)  signal = r,m,d \n","        #----------------------------------------------------------------------         \n","    print('END TASK :: denoising lead2 signal data for ' + str(xs)+ ' records')\n","    return 0\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n","#---------------------------------------------------------------------------------------------------------------------------------------------\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mUHcyD9fiWTH","colab_type":"text"},"source":["# DB DICT CREATION"]},{"cell_type":"code","metadata":{"id":"Zyab1h6EUC-v","colab_type":"code","outputId":"d35136ed-b627-416e-f305-a5fcea372e2c","executionInfo":{"status":"ok","timestamp":1582682101583,"user_tz":-330,"elapsed":1647,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":498}},"source":["# def __init__(self, dbname,  sampling_rate, lead2_index):\n","all_db = {}\n","all_db['mitdb'] = ecg_db('mitdb', 360, 0)\n","all_db['svdb'] = ecg_db('svdb',  128, 0)\n","all_db['incartdb'] = ecg_db('incartdb', 257, 1)\n","#print(all_db.values())\n","print('')\n","print(all_db.keys())\n","\n","\n","#g_MIT_AMAP_POSTFIX = 'ant_m'\n","g_ANT_POSTFIX = 'ant'\n","g_RAW_POSTFIX = 'raw2'\n","g_MED_POSTFIX = 'med2'\n","g_DEN_POSTFIX = 'den2'\n","g_RMD_POSTFIX = 'rmd2'\n","g_RDM_POSTFIX = 'rdm2'\n"],"execution_count":25,"outputs":[{"output_type":"stream","text":["\n","Initailze new ecg database ... \n","DB NAME :: mitdb\n","MAT DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/mitdb_mat\n","NPY DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/db_npy/mitdb_npy\n","S_RATE :: 360\n","LEAD2 INDEX  :: 0\n","RECORD SET :: [48] {'213', '208', '117', '221', '122', '119', '100', '124', '101', '212', '115', '233', '113', '102', '201', '203', '209', '118', '228', '222', '107', '219', '220', '106', '202', '121', '112', '231', '109', '200', '214', '234', '111', '217', '215', '114', '210', '207', '205', '105', '230', '116', '223', '103', '104', '123', '232', '108'}\n","\n","Initailze new ecg database ... \n","DB NAME :: svdb\n","MAT DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/svdb_mat\n","NPY DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/db_npy/svdb_npy\n","S_RATE :: 128\n","LEAD2 INDEX  :: 0\n","RECORD SET :: [78] {'877', '800', '825', '856', '807', '876', '889', '824', '860', '850', '853', '872', '868', '870', '861', '867', '886', '803', '865', '864', '878', '882', '869', '871', '822', '883', '892', '811', '802', '846', '857', '879', '893', '804', '820', '849', '810', '855', '875', '880', '851', '881', '885', '841', '805', '821', '829', '842', '858', '862', '891', '888', '873', '890', '840', '894', '844', '808', '809', '812', '823', '826', '866', '806', '863', '874', '884', '859', '843', '828', '845', '801', '847', '852', '854', '827', '848', '887'}\n","\n","Initailze new ecg database ... \n","DB NAME :: incartdb\n","MAT DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/incartdb_mat\n","NPY DIR :: /content/drive/My Drive/Masters/workdir/ecg_data/db_npy/incartdb_npy\n","S_RATE :: 257\n","LEAD2 INDEX  :: 1\n","RECORD SET :: [75] {'I26', 'I49', 'I51', 'I66', 'I14', 'I54', 'I08', 'I24', 'I09', 'I07', 'I22', 'I44', 'I46', 'I59', 'I74', 'I17', 'I45', 'I50', 'I37', 'I40', 'I64', 'I38', 'I65', 'I42', 'I56', 'I05', 'I75', 'I41', 'I71', 'I47', 'I36', 'I12', 'I28', 'I27', 'I29', 'I19', 'I31', 'I10', 'I15', 'I55', 'I62', 'I53', 'I01', 'I21', 'I68', 'I02', 'I70', 'I25', 'I57', 'I48', 'I16', 'I20', 'I67', 'I30', 'I43', 'I73', 'I69', 'I11', 'I23', 'I13', 'I04', 'I33', 'I18', 'I35', 'I60', 'I63', 'I39', 'I61', 'I32', 'I72', 'I58', 'I06', 'I03', 'I34', 'I52'}\n","\n","dict_keys(['mitdb', 'svdb', 'incartdb'])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ETKr7875iv4q","colab_type":"text"},"source":["# VIEW Section"]},{"cell_type":"code","metadata":{"id":"OF2nN3VK1Jeb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"64e0a70c-731d-4063-e413-30acb890922a","executionInfo":{"status":"ok","timestamp":1582681463274,"user_tz":-330,"elapsed":1374,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}}},"source":["\n","idbs = 'mitdb'  # 'mitdb'  'svdb' 'incartdb'\n","irec = '100'\n","\n","dbs = all_db[idbs]\n","selrec = dbs.get_record(irec)\n","manual_gain=1/selrec.gain\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["0\t100m 2 360 650000\n","\n","1\t100m.mat 16+192 200/mV 11 0 -29 27021 0 MLII\n","\n","2\t100m.mat 16+192 200/mV 11 0 -13 3668 0 V5\n","\n","3\t# 69 M 1085 1629 x1\n","\n","4\t# Aldomet, Inderal\n","\n","5\t#Creator: wfdb2mat\n","\n","6\t#Source: record mitdb_raw/100\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"orILynYIwOfM","colab_type":"code","colab":{}},"source":["\n","idbs = 'mitdb'  # 'mitdb'  'svdb' 'incartdb'\n","irec = '100'\n","\n","dbs = all_db[idbs]\n","selrec = dbs.get_record(irec)\n","manual_gain=1/selrec.gain\n","\n","\n","selrec.load_data(g_ANT_POSTFIX)   \n","#selrec.load_data(g_MIT_AMAP_POSTFIX)\n","selrec.load_data(g_MED_POSTFIX)\n","\n","# extract annotations ==================================================================================\n","ant2 = selrec.read_data(g_ANT_POSTFIX)       # all annotations\n","#ant2m = selrec.read_data(g_MIT_AMAP_POSTFIX) # only has mapr>=0 {no umapped beats preset}\n","\n","ant_s = ant2[:,0].astype('int')\n","ant_l = ant2[:,1]\n","\n","#ant_sm = ant2m[:,0]\n","#ant_lm = ant2m[:,1]\n","#=================================================\n","ff = 0 #figure\n","med2 = np.multiply(selrec.read_data(g_MED_POSTFIX), [manual_gain])\n","\n","L = len(med2)\n","Lsec = L / selrec.db.srate #1800 secs\n","\n","Lone = 180 #sec\n","Lmax = int(Lsec / Lone)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"kIZVub48Navi"},"source":["# VIEW : PLOT FIG RECORD"]},{"cell_type":"markdown","metadata":{"id":"j5Fs3j7Oi0wN","colab_type":"text"},"source":["# VIEW : PlOT FIG 3-min (180 sec) SIGNAL\n"]},{"cell_type":"code","metadata":{"id":"Ve0XH1bwgUXd","colab_type":"code","outputId":"2c358dfa-14e4-4c9e-db8f-5e4a76385892","executionInfo":{"status":"error","timestamp":1582682117698,"user_tz":-330,"elapsed":11641,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":487}},"source":["\n","idbs = 'mitdb'  # 'mitdb'  'svdb' 'incartdb'\n","irec = '100'\n","\n","dbs = all_db[idbs]\n","selrec = dbs.get_record(irec)\n","manual_gain=1/selrec.gain\n","\n","\n","selrec.load_data(g_ANT_POSTFIX)   \n","#selrec.load_data(g_MIT_AMAP_POSTFIX)\n","selrec.load_data(g_MED_POSTFIX)\n","\n","# extract annotations ==================================================================================\n","ant2 = selrec.read_data(g_ANT_POSTFIX)       # all annotations\n","#ant2m = selrec.read_data(g_MIT_AMAP_POSTFIX) # only has mapr>=0 {no umapped beats preset}\n","\n","ant_s = ant2[:,0].astype('int')\n","ant_l = ant2[:,1]\n","\n","#ant_sm = ant2m[:,0]\n","#ant_lm = ant2m[:,1]\n","#=================================================\n","ff = 0 #figure\n","med2 = np.multiply(selrec.read_data(g_MED_POSTFIX), [manual_gain])\n","\n","L = len(med2)\n","Lsec = L / selrec.db.srate #1800 secs\n","\n","Lone = 180 #sec\n","Lmax = int(Lsec / Lone)\n","\n","\n","\n","time_pad = 3 #secs\n","# extract annotations ==================================================================================\n","for ii in range(0,Lmax):\n","    fj = Lone*ii \n","    tj = fj + Lone\n","\n","    fi = fj - time_pad\n","    ti = tj + time_pad\n","\n","    fii = fi*selrec.db.srate\n","    tii = ti*selrec.db.srate\n","\n","    #ant2 = selrec.read_data(g_ANT_POSTFIX)       # all annotations\n","    #ant_s = ant2[:,0].astype('int')\n","    ant2x = ant2[(ant_s>=fii) & (ant_s<tii)]\n","        \n","    #ant2m = selrec.read_data(g_MIT_AMAP_POSTFIX)\n","    #ant_sm = ant2m[:,0]\n","    ant2mx = ant2m[(ant_sm>=fii) & (ant_sm<tii)]\n","\n","    #ant_s = np.subtract(ant2[:,0].astype('int'),fii)\n","    ant_sx = ant2x[:,0].astype('int')\n","    ant_lx = ant2x[:,1]\n","    #ant_sm = np.subtract(ant2m[:,0],fii)\n","    ant_smx = ant2mx[:,0]\n","    ant_lmx = ant2mx[:,1]\n","\n","    med2X = np.arange(fi,ti,1/selrec.db.srate)\n","\n","\n","    # plot record annotations ==================================================================================\n","    plt.figure(ff, figsize=(250,4),dpi=100)\n","    ff+=1\n","    plt.ylim(max(-0.2*g_COUNT-1,-2.5), 2.5 )\n","    plt.xlim(fi , ti + 2 )\n","    aa = plt.axes()\n","    ax = aa.get_xaxis()\n","    ay = aa.get_yaxis()\n","    #ax.set_major_locator(ticker.MultipleLocator(5))\n","    ay.set_visible(False)\n","    plt.grid(axis='x' )\n","\n","\n","    \n","\n","#    med2Xt = np.arange(fi-5,fi,1/selrec.db.srate)\n","    ri_f = 0\n","    ri_t = 0\n","    if fii<0:\n","        ri_f = -fii\n","        fii = 0\n","    if tii>L:\n","        ri_t =  tii - L \n","        tii=L\n","\n","    jt = np.hstack( ( np.zeros(ri_f),med2[fii:tii],np.zeros (ri_t) )) #med2[fii-selrec.db.srate*5:fii]\n","    plt.plot(med2X,jt,linewidth='0.2', color='black')\n","    plt.xticks(np.multiply(ant_sx,[1/selrec.db.srate]),ant_lx)\n","\n","    for gi in range(0,g_COUNT):\n","        samp_dict = ant_smx[ant_lmx==gi]\n","        plt.scatter(np.multiply(samp_dict,[1/dbs.srate]),np.subtract(np.multiply(ant_lmx[ant_lmx==gi],[-0.2]),1),color=g_COLORS[gi],marker='.',label=g_LABELS[gi]+' ['+str(len(samp_dict))+']')\n","\n","\n","    #------------------------------ CUSTOM ANOTATIONS HERE ------------------------------\n","    #cust_label = 'Q'\n","    #ps_x = np.multiply(ant_s[ant_l==cust_label],[1/dbs.srate])\n","    #ps_y = np.subtract(np.zeros(len(ant_l[ant_l==cust_label])),[0.75])\n","    #plt.scatter(ps_x,ps_y,color='blue',marker='o',label='Custom: ' + cust_label+' ['+str(len(ps_x))+']')\n","    #------------------------------ CUSTOM ANOTATIONS HERE ------------------------------\n","\n","\n","    #------------------------------ NON BEAT ANOTATIONS HERE ------------------------------\n","    ps_x = np.multiply(ant_sx[ant_lx=='x'],[1/dbs.srate])\n","    ps_y = np.subtract(np.zeros(len(ant_lx[ant_lx=='x'])),[0.25])\n","    plt.scatter(ps_x,ps_y,color='black',marker='x',label='Non-Cond P-wave'+' ['+str(len(ps_x))+']')\n","\n","    ps_x = np.multiply(ant_sx[ant_lx=='|'],[1/dbs.srate])\n","    ps_y = np.subtract(np.zeros(len(ant_lx[ant_lx=='|'])),[0.25])\n","    plt.scatter(ps_x,ps_y,color='black',marker='|',label='QRS-like complex'+' ['+str(len(ps_x))+']')\n","\n","    ps_x = np.multiply(ant_sx[ant_lx=='~'],[1/dbs.srate])\n","    ps_y = np.subtract(np.zeros(len(ant_lx[ant_lx=='~'])),[0.5])\n","    plt.scatter(ps_x,ps_y,color='red',marker='x',label='~Quality change~'+' ['+str(len(ps_x))+']')\n","\n","    ps_x = np.multiply(ant_sx[ant_lx=='\"'],[1/dbs.srate])\n","    ps_y = np.subtract(np.zeros(len(ant_lx[ant_lx=='\"'])),[0.5])\n","    plt.scatter(ps_x,ps_y,color='black',marker='+',label='Commnet'+' ['+str(len(ps_x))+']')\n","\n","    ps_x = np.multiply(ant_sx[ant_lx=='+'],[1/dbs.srate])\n","    ps_y = np.subtract(np.zeros(len(ant_lx[ant_lx=='+'])),[0.5])\n","    plt.scatter(ps_x,ps_y,color='green',marker='>',label='Rhythm change'+' ['+str(len(ps_x))+']')\n","    #------------------------------ NON BEAT ANOTATIONS HERE ------------------------------\n","\n","\n","    # get N B A density ==================================================================================\n","    #den_N = np.zeros((180,3),dtype=float) #density in 10 ms window\n","    #for i in range(0, len(den_N)):\n","    #    temp = ant2m[(ant_sm>(i-5)*selrec.db.srate) & (ant_sm<(i+5)*selrec.db.srate)] [:,1]\n","    #    den_N[i,0]=len(temp[temp==0]) / len(temp) \n","    #    den_N[i,1]=len(temp[temp==1]) / len(temp)  \n","    #    den_N[i,2]=len(temp[temp==2]) / len(temp)  \n","\n","    # plot density\n","    #plt.plot(den_N[:,0],color= 'green',linewidth=0.8)\n","    #plt.plot(den_N[:,1],color= 'gold',linewidth=0.8)\n","    #plt.plot(den_N[:,2],color= 'red',linewidth=0.8)\n","    # get N B A density ==================================================================================\n","\n","\n","    plt.title(selrec.name + ' [Duration] = '+ str(fj)+':'+str(tj) +'  [Total peaks] = '+str(len(ant2mx)))\n","    plt.legend()\n","    plt.savefig('/content/drive/My Drive/Masters/workdir/ecg_data/db_npy/data_png/'+selrec.name +'_'+ str(fj)+'_'+str(tj) +'.png')\n","    plt.close()\n","\n"],"execution_count":26,"outputs":[{"output_type":"stream","text":["0\t100m 2 360 650000\n","\n","1\t100m.mat 16+192 200/mV 11 0 -29 27021 0 MLII\n","\n","2\t100m.mat 16+192 200/mV 11 0 -13 3668 0 V5\n","\n","3\t# 69 M 1085 1629 x1\n","\n","4\t# Aldomet, Inderal\n","\n","5\t#Creator: wfdb2mat\n","\n","6\t#Source: record mitdb_raw/100\n","\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-33c5134caec8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;31m#ant2m = selrec.read_data(g_MIT_AMAP_POSTFIX)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0;31m#ant_sm = ant2m[:,0]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     \u001b[0mant2mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mant2m\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mant_sm\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0mfii\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mant_sm\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0mtii\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;31m#ant_s = np.subtract(ant2[:,0].astype('int'),fii)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'ant2m' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"davtUmnri7EO","colab_type":"text"},"source":["# VIEW : SAVE VIEW-INFO"]},{"cell_type":"code","metadata":{"id":"sU-EPRjw6oME","colab_type":"code","outputId":"30902baa-0b31-4fc3-ce10-c385fbde4d01","executionInfo":{"status":"ok","timestamp":1582663663269,"user_tz":-330,"elapsed":1236,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["d = datetime.datetime.now( )\n","print(datetime.datetime.now( ).strftime(\"%d%m%H%M%S\"))\n","\n","time_period = 12 \n","time_delta = [-1,1]  #[min,max] in secs\n","time_total = 1800 #secs\n","sel_per_rec = 5*60 #secs = 300\n","\n","# constant----------------------------------------\n","time_resol = 0.04\n","time_safe = 2\n","time_safe_resol = time_safe / time_resol\n","time_step = int(time_period/time_resol)\n","\n","\n","# --- data plotting for input data\n","x_scale = 0.04 * 25\n","y_scale = 0.04 * 10\n","m_scale = 1\n","fwid = ((ti-fi)/my_db.srate) * x_scale * m_scale\n","fhig = 6 * y_scale * m_scale\n","lysize = (fwid,fhig*1) #secods\n","# constant----------------------------------------"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2502204742\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OYpEGufE4j-K","colab_type":"code","outputId":"3bf610fc-14bb-4ab6-d912-d30150510558","executionInfo":{"status":"ok","timestamp":1582647453979,"user_tz":-330,"elapsed":35126,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":976}},"source":["# LOOPING TO SAVE\n","allfig=0\n","\n","win_sel = int(sel_per_rec/time_period) # = 30\n","win_total = int(time_total/time_period) # = 180\n","print('time_period = '+str(time_period) + ' sec')\n","print('time_delta = '+str(time_delta) + ' sec')\n","print('sel_per_rec = '+str(sel_per_rec) + ' sec')\n","print('selection: '+str(win_sel) + ' of '+str(win_total) + ' views per record')\n","#save_these = []\n","\n","megadb = np.zeros((0,4),dtype='str') # [db rec fi ti]\n","for idbs in ['mitdb']:#all_db.keys():\n","    #idbs = 'svdb'  # 'mitdb'  'svdb' 'incartdb'\n","\n","    dbs = all_db[idbs]\n","    L = 1800 * dbs.srate                          # max within 30 mins\n","    for irec in dbs.recs:\n","        #irec = '868'\n","        selrec = dbs.get_record(irec)\n","        sel_ind = set([]) # empty set\n","        while len(sel_ind)<win_sel:\n","            sel_ind.add(time_period * random.randint( 1, win_total-1-1 ) + random.randint(time_delta[0],time_delta[1]) )\n","        \n","        time_start = np.array(  list(sel_ind)   ) \n","        \n","        time_period_samps = time_period * dbs.srate\n","        time_start_samps = np.multiply(time_start,[dbs.srate])\n","        print(str(allfig)+'\\t'+ selrec.name)\n","        for tstart in time_start_samps:\n","            fi = (tstart)\n","            ti = (tstart+time_period_samps)\n","            #save_prefix = selrec.name+'_'+str(fi)+'_'+str(ti)       # name = dbname_rec_fi_ti\n","            if fi<0 or ti>L:\n","                print ('Beyond Limits : can not form this view')\n","                continue\n","            cvinfo = np.array( [selrec.db.name,selrec.rec,str(fi),str(ti)  ] )\n","            #print('\\t'+str(cvinfo))\n","            megadb= np.vstack( (megadb,cvinfo )  ) # [db rec fi ti]\n","            allfig+=1\n","\n","print('saving...'+ str(len(megadb))+ ' views')\n","save_prefix = datetime.datetime.now( ).strftime(\"%d%m%H%M%S\")           \n","np.save(os.path.join(global_datadir,save_prefix+'_vdb.npy'), megadb)\n","print(save_prefix)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["time_period = 12 sec\n","time_delta = [-1, 1] sec\n","sel_per_rec = 300 sec\n","selection: 25 of 150 views per record\n","0\tmitdb_118\n","25\tmitdb_228\n","50\tmitdb_122\n","75\tmitdb_212\n","100\tmitdb_113\n","125\tmitdb_234\n","150\tmitdb_124\n","175\tmitdb_201\n","200\tmitdb_205\n","225\tmitdb_220\n","250\tmitdb_108\n","275\tmitdb_222\n","300\tmitdb_121\n","325\tmitdb_200\n","350\tmitdb_210\n","375\tmitdb_203\n","400\tmitdb_106\n","425\tmitdb_221\n","450\tmitdb_208\n","475\tmitdb_123\n","500\tmitdb_233\n","525\tmitdb_115\n","550\tmitdb_111\n","575\tmitdb_231\n","600\tmitdb_209\n","625\tmitdb_114\n","650\tmitdb_214\n","675\tmitdb_217\n","700\tmitdb_107\n","725\tmitdb_109\n","750\tmitdb_119\n","775\tmitdb_102\n","800\tmitdb_104\n","825\tmitdb_202\n","850\tmitdb_232\n","875\tmitdb_116\n","900\tmitdb_215\n","925\tmitdb_101\n","950\tmitdb_103\n","975\tmitdb_213\n","1000\tmitdb_207\n","1025\tmitdb_230\n","1050\tmitdb_112\n","1075\tmitdb_219\n","1100\tmitdb_100\n","1125\tmitdb_105\n","1150\tmitdb_223\n","1175\tmitdb_117\n","saving...1200 views\n","2502161737\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AwLdZQkjpPhs","colab_type":"code","colab":{}},"source":["flist = os.listdir(global_datadir)\n","for i in range(0,len(flist)):\n","    print(str(i)+'\\t'+ str(flist[i]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZtLPEkt0EYbD","colab_type":"code","outputId":"e32a71a9-8115-43b9-e613-9eadbfc9ea47","executionInfo":{"status":"ok","timestamp":1582649235097,"user_tz":-330,"elapsed":3025,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["#fli = flist[random.randint(0,len(flist)-1)]                                      # select databse file [ 1 ]\n","fli = flist[0]                                      # select databse file [ 1 ]\n","argsa = np.load(os.path.join(global_datadir,fli))\n","print(str(fli)+ ' - loaded ' + str(len(argsa))+ ' views ')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2502161737_vdb.npy - loaded 1200 views \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"E5Gef5ZNdqe2","colab_type":"code","outputId":"f720b609-62f9-4ad8-9ee7-5b491eafc57e","executionInfo":{"status":"ok","timestamp":1582656490794,"user_tz":-330,"elapsed":2668,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":778}},"source":["\n","\n","rdi = random.randint(0,len(argsa)-1)\n","args=argsa[rdi]                                       # select view \n","print( '  Selected ['+ str(rdi) +'] '+ str(args))\n","\n","\n","dbi = args[0]\n","reci = args[1]\n","fi = int(args[2])\n","ti = int(args[3])\n","my_db = all_db[dbi]\n","my_rec = my_db.get_record(reci)\n","manual_gain=1/my_rec.gain\n","save_prefix = dbi+'_'+reci+'_'+str(fi)+'_'+str(ti)    # name = dbname_rec_fi_ti\n","\n","\n","# load signal ======================================================================================\n","signalmed2 = np.multiply(my_rec.load_data(g_MED_POSTFIX)[fi:ti],[manual_gain])\n","#signalraw2 = np.multiply(my_rec.load_data(g_RAW_POSTFIX)[fi:ti],[manual_gain])\n","plt.figure(0,figsize=lysize, frameon=False, dpi=150)\n","plt.ylim((-2.5,3.5))\n","plt.xlim((0,ti-fi))\n","plt.axis('off')\n","plt.plot(signalmed2,color='grey',linewidth=0.1)\n","plt.savefig(os.path.join(global_datadir,save_prefix+'_x.png'),bbox_inches='tight')\n","\n","# load all annotations for selected record ======================================================================================\n","vinfo = my_rec.load_data(g_ANT_POSTFIX)\n","# get annotations within limits\n","vinfo_s = vinfo[:,0].astype('int') # samples as integers\n","vinfo_lim = vinfo[ (vinfo_s>=fi ) & (vinfo_s<ti) ]\n","# get mapping : (>=0 are mapped R peak labes, -1 is unmapped beat label, -2 is unmapped non beat label)\n","vinfo_lim_s =  np.subtract(vinfo_lim[:,0].astype('int'),[fi])  # within limits, samples as integers\n","vinfo_lim_l = vinfo_lim[:,1]                 # within limits, labels\n","vinfo_lim_li = mapstd(vinfo_lim_l)           # within limits, integer labels\n","# convert lim_s to time stamps in seconds\n","vinfo_lim_st = np.multiply(vinfo_lim_s,[1/(time_resol*my_db.srate)]).astype('int')\n","\n","lysizey = (fwid,0.2)\n","plt.figure(1,figsize=lysizey, frameon=False, dpi=150)\n","plt.ylim((-1,1))\n","plt.xlim((0,time_step))\n","#plt.axes().get_yaxis().set_visible(False)\n","plt.axis('off')\n","# continuous labels - DATA LABELS-------------------------------------------------------\n","\n","\n","#l_cont = np.subtract(np.zeros(time_step),[1])\n","# for each timestamp in vinfo_lim_st, l_cont[timestamp] = vinfo_lim_li ]\n","#plt.scatter(vinfo_lim_st,vinfo_lim_l)\n","\n","#for i in range(0, len(vinfo_lim_st)):\n","#    ts = vinfo_lim_st[i]\n","#    tl =  vinfo_lim_li[i]\n","#    if ts >= time_safe_resol and ts < time_step- time_safe_resol:##\n","\n","#        if tl < 0:\n","#            l_cont[ts] = -1  # tl can be -2, -1, >=0\n","#            \n","#        else:\n","#            l_cont[ts] = tl  # tl can be -2, -1, >=0\n","#            #plt.annotate(vinfo_lim_l[i], xy=(ts,0) )\n","\n","\n","\n","#plt.plot(l_cont,linewidth=0.2,color='grey')\n","vx = vinfo_lim_st[(vinfo_lim_st > time_safe_resol) & (vinfo_lim_st < time_step- time_safe_resol)]\n","vy = vinfo_lim_li[(vinfo_lim_st > time_safe_resol) & (vinfo_lim_st < time_step- time_safe_resol)]\n","for i in range(0, g_COUNT):\n","    \n","    c_cont = np.where(vy==i)[0]\n","    plt.scatter(  vx[c_cont], np.zeros(len(vy[c_cont])), color = g_COLORS[i] ,marker='.')\n","# continuous labels - DATA LABELS------------------------------------------------------- np.arange(0,time_step,1)\n","plt.savefig(os.path.join(global_datadir,save_prefix+'_y.png'),bbox_inches='tight')\n","\n","\n","# l_cont, signalmed2\n","#np.save(os.path.join(global_datadir,save_prefix+'_y.npy'),l_cont )\n","#np.save(os.path.join(global_datadir,save_prefix+'_y.npy'),signalmed2 )\n","\n","plt.figure(2,figsize=lysize, frameon=False, dpi=150)\n","plt.ylim((-2.5,3.5))\n","plt.xlim((0,ti-fi))\n","#plt.axis('off')\n","plt.axes().get_yaxis().set_visible(False)\n","plt.grid(axis='x')\n","plt.plot(signalmed2,color='grey',linewidth=0.5)\n","plt.xticks(vinfo_lim_s,vinfo_lim_l)\n","plt.annotate( '|', xy=(time_safe*my_db.srate,-2),color= 'red')\n","plt.annotate( '|', xy=((time_period-time_safe)*my_db.srate,-2),color= 'red')\n","\n","\n","\n","#plt.axes().get_yaxis().set_visible(False)\n","#aa = plt.axes()\n","#ax = aa.get_xaxis()\n","#ay = aa.get_yaxis()\n","#ax.set_major_locator(ticker.MultipleLocator((my_rec.db.srate)))\n","#ay.set_major_locator(ticker.MultipleLocator((1/1)))\n","#plt.grid(axis='x',color='green')\n","\n","#plt.plot(signalraw2,color='red',linewidth=0.1)\n","#plt.plot(np.subtract(signalmed2,signalraw2),color='red',linewidth=0.1)\n","#plt.xticks(vinfo_lim_s,vinfo_lim_l)\n","\n","\n","\n","#vinfo_ll = mapstd(vinfo_l)\n","\n","#for i in range(0,len(vinfo_s1)):\n","#    vsi = vinfo_s1[i]\n","    # if vsi is within time_safe seconds from either side of the view then take it\n","    #if vsi < time_safe_samps or vsi > (ti-fi) - time_safe_samps:\n","    #    continue\n","    #il = vinfo_l[i]\n","    #icol = 'green'\n","    #if il!='N':\n","    #    icol = 'red'\n","#    plt.annotate( vinfo_l1[i], xy=(vinfo_s1[i],-2),color= 'grey')\n","    #plt.annotate( vinfo_ll[i], xy=(vinfo_s[i],-2.5),color= 'black')\n","#for jx in range(0,g_COUNT):\n","#    vind = np.where(vinfo_ll==jx)[0]\n","#    plt.scatter(vinfo_s[vind], np.multiply(vinfo_ll[vind],[0]),color=g_COLORS[jx],marker = '.')\n","\n","# build output array\n","#resol = 0.04 #sec\n","\n","#print('tt')\n","#aa = plt.axes()\n","#ax = aa.get_xaxis()\n","#ay = aa.get_yaxis()\n","#ax.set_major_locator(ticker.MultipleLocator((my_rec.db.srate)))\n","\n","#print(vinfo_s)\n","#yind = np.multiply(vinfo_s,[1/(resol*my_db.srate)]).astype('int')\n","#rstep = int(time_period/resol)\n","#ylab = np.zeros(rstep)\n","#print(yind)\n","#ylab[yind] = 1\n","\n","#print(l_cont)\n","#plt.scatter(yind,vinfo_l)\n","#for jx in range(0,g_COUNT):\n","#    vind = np.where(vinfo_ll==jx)[0]\n","#   plt.scatter(yind[vind], np.multiply(vinfo_ll[vind],[0]),color=g_COLORS[jx],marker = '.')\n","#plt.title(save_prefix)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["  Selected [632] ['mitdb' '114' '151560' '155880']\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:86: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["Text(3600, -2, '|')"]},"metadata":{"tags":[]},"execution_count":140},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABZEAAAEtCAYAAAB58C7bAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAXEQAAFxEByibzPwAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3dd5dlx3kf6t/MIA7SICcikEQgGMAM\nMIkUKVMiqWhb1+FKsi3nG75DrfoM93o560qyZVukJMsmRYoUgxnEnBNIAgRBEAABIueMvn+8ddAH\njd4zPTPdfTo8z1pYmD59+pw6Z+9du+qtt6r2LC0tBQAAAAAAVrN30QUAAAAAAGDrEkQGAAAAAGCS\nIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAAAAAA\nTBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAwSRAZAAAA\nAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJIgMA\nAAAAMEkQGQAAAACASYLIAAAAAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFk\nAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgk\niAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAwSRAZAAAAAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAAAAAA\nkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJIgMAAAAAMEkQGQAAAACASYLIAAAAAABMEkQGAAAA\nAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAA\nAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAwSRAZ\nAAAAAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJ\nIgMAAAAAMEkQGQAAAACASYLIAAAAAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADA\nJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAA\nAJgkiAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAwSRAZAAAAAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAA\nAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJIgMAAAAAMEkQGQAAAACASYLIAAAAAABMEkQG\nAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmC\nyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAw\nSRAZAAAAAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAA\nACYJIgMAAAAAMEkQGQAAAACASYLIAAAAAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAA\nAADAJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEB\nAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgkisy5677/ae9+/6HIAAAAAAOtLEJn1ck+Slyy6EAAAAADA\n+hJEZr08mWTfogsBAAAAAKwvQWQAAAAAACYJIrNelhZdAAAAAABg/W1IELn3flHv/dqNeG22rD2L\nLgAAAABsZb33qxZdBoAjsVGZyBckeWaDXhsAAABgO3pj7/3URRcC4HBtVBB5KTJTd43e+7FJnopj\nDgAAAKvqve9JclOSFyy4KACHbSODyOweB5LcF8cdAAAAppyf5PokJy+6IACHy8Z6rIcDSe5ddCEA\nAABgCzsryZ0xixfYhjYqiKxC3F1OS/LAogsBAAAAW9gJrbXHYhYvsA3JRGY97G2tPb3oQgAAAAAA\n608QmfWwZ8X/AQAAAIAdwsZ6wFHpvZ/Sez9h0eUAAADY4sRKgG3LmsisJzfE3em1SS5ZdCEAAAAA\n2BjrHkTuvQsg7z6Cx7vbI6nNFQEAAADYgTYiE/m0JPdFNjIAAADAjDgJsG1tRBD5/CS3R3YqAAAA\nwEriJcC2sxFB5FOTPLgBrwsAAAAAwCbbkI31WmtG1XaB3vtpvfe/leSZRZeFhXK9AwAAAOxgGxJE\nZte4MsnDSb6z6IIAAADAFjdLwLE2MrDtHLMBrzmrDJ/pve9rrT29Ae/BFtFa+/Ciy8DCaQABAAAc\nmr4TsG2tayZy7/3YJE+NHx9Lcvx6vj4AAEev935s7/03Fl0OANZX7/343vv+RZeD5+u9H5PleAnA\ntrPey1m8OsnXx78fT3LCOr8+sIX03vfGmtgA29F5iy4AABvixUmuWXQhWNWBJPctuhAAR2q9g8j7\nWmuzkbXHIxMZdrr9qXWxAdhezk1yx6ILAcC6Ozna51vVfBB5qfduaQtgW1m3IPIqGYmCyLuQG+Gu\nc2qSB2NtL4DtZl8S+1bADjOWF2R32xNt863qtCT3j38/keS4BZaFbaD3fuaiywDz1jMT+aok3537\neeFrIvfeT17k++9CT2ZjNms8Yr33a3vvbs4b55wkd2Z5l2FgG+u9X9R7f9WiywHAEXtX7/3AogsB\nvfd3994llT3X3tbabAD3sVj+k0P7tUUXAOatZ8Dv5Nbag3M/L3RN5JER+497759Mcnxr7YuLKstO\nNDLPVwYOZ8f8yc0v0XP13q9KclaSHyV5fZK/XmyJdqzjWmuP994XXQ52kd77zye5OclFSW5rrV2/\n2BLtKOfHoNBuIlNtB+u9n9Fau2fR5WDT/SzJZUm+vOiCsDALvY/33t+T5MYktyZ5T+/9h621by6y\nTFvUo0lOzHJmMqzmpEUXIHn2uv5Ya+3xRZeFxVrPIPLKjsiip2e8JMn7UtnQx/XeL0zys9bawgOc\nO8QFqYbBvNkSJg8+/+mbZwS4z2+tfXz8fF7v/Xdaa/9pkeVi4/TeT0hNy351kmdaazpOG6j3/out\ntY8s6L0vTfKDJK9Ncn2S83rvVyT5YGtN8BPWzvWyg41kir+b5F8vuixsuqUseICo974/tWTOeUku\nTvJIkhtba9Zh3+F675cn+V6Styf5/8a/r+i9n91au3Ohhdsa5q/Nx7JFAoQwpff+2iQ/TfLDJK+I\nAcptrff+oiQ/Opp+87oEkXvvx2TFunqttWcWsT7uWDPmBUlOaK1dNx7bk+R3U4GHz2x2mXaaEaT9\ntTy/Y7LwdbB7769Pcmyee5y/kuTY3vspK7Ll2Tlem2qUPZnapOL/TPJXSX7YWnvmoH/JkXhR7/3Y\nzRqUG1Mhj03yN5I8MAaIbhu/+1lqwPLyVB3PNjfW89zTWnti0WVh4/Tez00lHJyW5OokZyf5o9ba\nYwst2M5xbpK7FvXmvfdTkzzaWntyNnvNQN/ON5YSfHmSU5I8NP77RGrZwxf33u9Vt+9cvfdXJ3mo\ntXZj730WpHgiybd772/tvd8zt5QDlYlsvVsmjT7QwurMEUc7Psm7k/xekl/svf+d1tp7F1UmjtrF\nSc7IUQwGrNeayG/Kc9dDXqTLUzvSPhsgb60ttdZ+L8lTCyvVzvLSJH+4SmdgoUHkUckd21r77HwD\ndZTzy0ku771fvKjysf5673t6769IDWL9JMm9rbWvpI73RUl+yWYEG+Ku1M1ns7wmyc8l+fJshsFM\na+2e1trtqeVr2MZ67y/uvb81dazf3Ht/T+9936LLtdMtaMB/T5IrU8Hj41tr/zPJ76cyXFgfF+b5\nM8Y2XO/9QO/9tFRb8fW99zek+gnvHv9mcywqE/llqfbYT1prn2utfau19kxr7TupKfvvGQMMbKxN\n3Viv937CLNg0W2JslX7i95O8cbPKtE08llrOAqackuSBRbzxuKZfkeS61tp/HDG1Dyf5/phtwjYz\nEjjuTc0UOmJHnYk8ppE/0lp7+Ghf6yjLcXYqG3F/Kgt1tTXg7ui9X9Ra+8mmFm7n2d9ae2iVxxcW\nRO69vzjJW5P82Wq/H5kwJ6Y6Mb9vLZ8j13s/KxWg/faiy5Lkdam1/743nxU7vwZ67/3aJHcvoGw7\nwizAtKIzcF+SA0k2a1rqUmvtQ4d4zs9677+c5C9luaxd733PorMD54KYs3XsT0kNBt+Q5JVJvrqg\nou0Gs/v2pmX/jky1k1ODQo/MHm+tPT0CEWe11haWQbuD7MsmJ0+MjOOXpbLL705lT53SWvvE+P21\nvfd/kuT3Fl3vsP5mm/m11lYdvGitfaf3/t0k1yb5/GaWbZfazGvsjUkuTfL+qSe01u4Y06gZRv90\nq21K/2y7sPd+TWq/o/uTnN5a+1+LLNsudWqSezZ5BuibUwlDVyQ5c5X1zL+fSgT4xmaUh/XRe39H\nkrtba9/ovb/gaF5rPSqtlyf5+jq8ztF6TWvtLw/2hNbaj3rvr+29RyD5qEw1Shayw2zv/erUKO7H\nWmsH25jglam1ua5O8qXNKNsO9cZUoOftWdBGEL3381I31X2ttR8f4ukv7L3va619dhOKthO9KRUI\nmL9mHkoF+jbUyDK/IDVQcFCttRt67z9JZS27vtfud1PT0+Ztdgbb21Izox5ZeW/uvV/ae39za83m\nqEdpIjg729Rnw4PIvfcLUvXJTa21T0887XtJXtN7/3Fr7fsbXSbWz2iLXZoaXPxyknNba9/qvc+v\n93l7kptSWcrf2ewysjF676ekBvVPTW16O6m1ttR739t7v2QN7TeO3KYEkMf6x8en2mk3rGEA8Jbe\n+4VTAw27xJba0Lb3fmpr7YExQ+CK1BKQNye5ZDzlvtSMzyfHIOAfTySTsTFOTd1XT0wt27hheu+X\npAb5H06dpx9fLVG0tfZY7/34zQxsc+TG7LC3Jvlka+2BJGmt3XI0r7keQeRjWmubvkzEyIa8prX2\nwTHyfdBGy0xr7Su992t67/emOqzWS10/T2V9N2s8pLH22oEkt7bWDnUO/NuR6XSitXyOzJhafntr\n7du993tW/G7DMxrHpmr3p3Yd35PaqOVQPpra0GPhGZfb1FN5foP3mVUeO2pjcOC8JOekGkoPpQYp\nDxlETpLW2uMjk/H01tq9612+ra73/sLW2o8O4/lXpYI6CzGO9zWpjIaHUmvirnRTkqd779fMzzDg\niPy9JP/visceSXVM1v16GcHD/am1eU9KDfr9ycH+Zmy69JHeuynPh2GsI/6m1tonF/DepyR5Q+pc\n+kBS+6Jk1NvzHdBZ0HDcy1kHvfd/0lr7jyse3rS2zphZcE6STyV5Yo0zgb6f2ghZEHkdjGtwzyw4\nsEnv+fJUn29/kvvHciWH1Fr7Se/9l0ab/KiCGBy90Q68oPf+eCpQfGdqJsnrknwtFSu5azz3mCSf\nS/LGEZT6kH7Vpjgu1Vbfnw1a1mIs/fiaVELBo0m+soZje2KSv9t7/2OB5MPXe//V1trkzI11fJ/Z\n8mIfWM/rdT0CfouqPF6c5Ku99zelMpgON0vplangyBfWu2Bbyfh+bmut3bTi8bNSnfebWmuHu571\nqsGjkV2wKaOrvffXpbJYXpTki2vZiGeuYXtHaiT8kiQX7uQM1d773nUeKHlJKlMsrbXb5h5/MlWf\nbMhNZEyRvTzVUbky1Tm9Lmuof1prd/XeH0tyde/9Wzt54Kj3/gtJPrPOy7Xsydz33Jc3eDh2PV58\nNFxemAoeP5zk+iS3pAYKvnYEg5RfSPKO3vuHd1Pjttd6769JzRJYq9OT/KT3ftKKTIMN/95Gp/cV\nYy3cmedlJs0yk3vvF210mRat935FqhN3RZIbpzJxj6Re772fnsommv08u1c/mjoPNsJVqU7PniQP\n5vBmrjzRe796lSmU294YjD2ltXbfIZ+8dldmEwbxx8DPXakA4GyQ4N4k30xNdV7reXlC7/3nk3xq\nJ9+TkzreI4Hhtan75q3rNRty1KMP9g3YOHrUES+dBQdHv+GM1toPeu+/0Vr78/HUE8camWvWWru7\n9/7gbhzc772/vLW23svBvWz8f8OWCOm1bOS+VJbigfHvR5N8/giu4Y8kuar3fsGKvsSON+r/hS65\nNvpU5yb5hVRb42OrPOe+lclZs/Z47/2h1DIGrxpts4+nNlHdNUvJjcGzG1IDqHem+jH/cz2+g977\nz6+ybMgjqYzkdTfq+lcn+ViSN7bW1rTZWmvtk+MedHm2zt5oG2K9l1kb181xqzy+rjN0xnI0+5Pc\nsd732qNqcI4RqQ3PQu69/71UdsMjSV6fGiVZarWZ0pFkUT2Rugk+NRrEp2Ss3Xa00zN67yeMFP/9\nSZ5ZS3BzPY2b077UBf10qvN2Xiqba97VI4v7ms0s3zralwqYPHW43/GsYz7W+3lyZPDsO9JjNbKh\nr2qtbZkp9L02rzmQ5NLe+3tbayuzhl+31pvECudOZBs8lprOtlEjkW9P7V78kVRD5bCCpK21h3rv\nF6YGTv79BpRvYcbN/x8m+fPUcfi53vuT65GRNoJaP0w1jmZOSQWDVssaPdTrnZjqlH5l/Hxekvek\nBib+MlVnzjojR3Szbq090Xv/6yQv773f0Fp79EheZ1aXH8Hf/VJqXf43p5bVePERXmurvfaLUw3+\n1RoCF6U2M1rra+1J3b/vTF1bm7avQe/9lanB3+d1XA7i8d77O1MzC962SgP7cMuwJ9WJejLJ2a21\n7x3N6x2tXvtLnJlql92d5Jxx/X22tXb33POOTfKPcvj12GWpa3lmf6pN9WhqyZh102udtVeN178x\nyS2HOxg0Zo2dN875S5J84kgawL33M1L1ynoGbI/Wa1KZX6ck+aN1atiflOShVYJyz8yCmIfzYivr\nv3He7U0tYXdWKlj17STnJ7mstXZHDm+N/M+k2gzXpjLbdrJf6L3fkvq830ny0t77vSv7G733X2+t\n/Y/DfO1XpO79L81YWnAEiNbDVUle0Hu/Lck7k9yWmhXy4tTg47tSg0NHGjy4PrXh9eNH22nutc7u\nY1sxINl7v7i1dnPv/S2pgbyrxv3nxtng7ehPX5pK+lnLDLuVVqtD9kw8vpYy70+tl//iVKDjpCxv\n1LeUOu5PttZ+cCSvP+qo7/be/3nv/YHW2n87ktfZDnrv56dmcM6Oxavz/KV8NnMDxJOT/EYqo/WD\nmZjR2Vr74WqPj999Y7zWq1JrYF+e5Oze+4OpDV3/NNUv3jGBxfl74qxdkeTdSd6X+sy3pBLbrp/7\nm5NTfYDDXTf4st77F1fUBY+k4jlHWv5LU7GTh1JtkPtTcYJPpjaz/sTofx1WUmZr7cHe+2W993Pb\n2PtgkUbdetx6JFONdvlvJPnjJNf23m9aLQYykqvOOczB4YuSfKf3flobS7GOPvJbchQzdEbCyAtb\na7O9ZPYcbX9pytFmLVyd5IhuIKuZy3B4emS1/nzqi/xSquGaVCf54hxdptQ3UhfOlamO1VKqk/Jw\n7/3zSfYeqsHdKzX8sSTvSjWGz01VHL/Te//vqXVH9vfeP5FqFCzN/c0T8438vmLjqvHz3lTF84P5\n5011NnqtSfVIqjN4YuqGdE4qK+/scXHfMZ67NyumQ8yfxBOv/5vtENNQhzUflz7WYFrl8b+3skEx\nGojnZ3kA4O7Ud3nEo3Kttb8ex2S2Kd+/W6UsB1IV7WtSDeil8b6PpM6dk1OV8t5eWd/fTmWa3Dc7\nh2bfbe/9d5L8USq49MVZBdd7P6e19rPe+7uTfGQN594xrbWnVlQ8V6UaeU+lRkafTvLhcd5dk+SL\n43kXjvJd3nv/9uEEycbf3jDx69l62GsehJk6n8f3+NPUMfl4apT3k0nuPMrO9oeSvGzc/F+V5BPJ\nsxn0x6TOpQOpTM6XtNauW1GufanjvzT+5uxUg+G6JA/PHe93pwI/s2PznCUGxrn8o3UcEXxFkv+Z\n6uR9IDUF7eHe+4mttUdHfXJe6nw9trX28bW86PieXtRa+8ve+3wQ+dTUNXHWIf5+1ij+ndQN+JdT\n9dqPeu+/mgpi3ZIKRuw93CDTwYxGzYuSXNR7/0iSV84C1yvKeE5rbWqpjHf23m9MdfzvTV1f31nD\ncXssVac8nLpHvqj3fkNqSuATo66+M7UU1LOB8kPU769OXV+njYd+uOL3b08F607qvZ+8xsHQs1MZ\n/XenzqE1LQnVa5mBL7dVpq6Na+S3Wmt/OKun5n63J1WHX5nk8XaYM0Baa1/vNX32banz+6CZd7Pv\nczSormqtfbb3/tbUuXtSKnh8INUReKhXluBNSe452DHuvV9xsI7zIY7jianjvlq5fydVR92TMQA9\nvrPX996fTk0XXkq1hb7Y17hky6xBnbpPPT1XvjOyfB9d887wIxDy13Ptlbcl+XSSy1tr3x/vd3Fq\nwO+4oxmYb63d3nv/jdS998pem6T+4Srtp3NbJRWs/NxJZeg903t/MnUNfnv8/kBr7b7e+0tS981z\nknx3ZbB5tEsPmcExd77Nb0g0K8Ms+HJVqt29JzVodkKS1/Xev7byWjmC+8NS6no+N89Nrpiteb2m\n49B7Pyd1Dv7T3vu/Sw0g3pTk51NBrv8vFTyale/G3vvhzH5I8uzMsEd67z/tvf/D1tof9JphdlM7\njGyfcX2/Pcm3RvkeSF3jd6Xuy4+ueP4Fqe/kvvW4B6/xWD2QqmuuG23BLyR5U69Bztt777+Yuhbv\n6hNZSONcelN7/trwT4/7ynxG08k5xL4Fc+3IlfX0L6fOzfekvsdbUm2Kv8po6yZ516jjjyqLuLV2\nT691tPeN43hem9jbZnz+s0dbeeU1tjdjIGy02fdmeRmuvfOd/lFfffVg945DGd/1Fe0Q2cSjXf7D\nJG/vvd+V5LOpWR8fSN0H39N7/3iqH3lTqm54ae/91tXaK4ewlPrcs/c+NvUd7DtEGa9prX2x9/7a\nVgN3p6eCG29N1Sc/TfW7Zt/zY6mgxHqtZ/7vk7x6fKdPr9b/We08G+2om1ODJ7Ml7r4+1Z7rvZ8x\nzrfZeb9hGfC999enZmacmTrOd6fa4F8b/e/jV9ZLOfJg/+y+89JU/TK7Lp79nOOpr0vV6xel+q//\npa3PDJD/0SpJabbcxbGpfuLvJPn26Edcm4qTXNZa+9pBPsP8df2StkED+70Cu5e05RkW70oF9W8Z\n5Tgn1R6Y3QuvG/31X++9fzQV5Hu6tfaBLG8qd8t4rdf13s9rrX269/6yVD/nSPaKujl1rOZno62p\nrTbOsXNbaz8d9eHxqSD3/tS94f7W2odG2+biVD/laGduvj/Ja3sFU/9+kj8Y3+XlqVjWc+r1Ue/f\nkapXrmljRuLcuXBGqn/9nCU1Rr/7/vE5Xp3k5tba9X05jjLLqD4p1S49YuO1rk61ZX8uFRs4eZX7\nz1tS9587eu+3HSqGM+eZVNv2wizP0rssq8zInCvTK1N1+gtSS1M8Mx6fXe+/mLn4Xq/4z4bNDtiz\ntHTk50zv/UWttRsP8vtV1zDsNYr9aJKTZ52xcaK/KTVKO8t4eDzJq1tr/2qccE+01r43nruvzWXn\nHGH5T081uG9I3bxfm/qyT2it/a9e2Zx3pQ7yk6kD/s7Uul+/ndox/pmMzkeSX0zyn5P8zSTvGwf0\njamDfdN4j2NTDbvHUzfnk8ff35kKyD+Wqny/MP7uwVQA41tJ/u/W2v/Te39NWx5hmH2WN6QuxmdS\nN6NvJTmrLU8FftN4nQtHWe5tNZ3s2tSaR/9ivPYL2oo1qkaF9LdTN4GrU4GUVdexmjrm43fPLr7e\nK2j3T1tr/2blc5L80yT/JtXYemHqgnpVqjI/PlW53nIYF+pBje/u3NTxuH28R1IVxr9MBRvPTn23\ns8DJSaljs3c8/tXUhf22VIPrkVTlf1GqMf611DGeBS5OSF3oP0tVlE+lzrV943M+Od7zgVTm5odH\nWS9OXScfTY2AXpe6MTw+/vbJVHDgI3OV3NvH+309Fdw6PWMqWWvteZtijnPi/pU38N77G1prq06V\nGx2zvfPnxex4997f0lr7TO/9uNHZ+dUkH07y66P8+1LHdHaMb0s1YD+YCkj9h9Xe80iM8+5fpDrC\nb0k18r6eCojuSx27x1PBugdTg1ZnpoIws6DpiaOML0w1HE7Ncn31/dQ1dmbqvPhakl9JjVT/XOr8\nOn283mlJ/iTJq9qKTNVxo7xolGFpPPeJ1Dn5+HiPx8ZrnbCyYdYrmPcrWZ6q/r1UI+l1Sb6w4qZ8\nRmrn3et778e3Wlf4QJKXt9Y+M57z7HXdK/Pgu6Pcq9Xvr0zVMb+Q5bromiTvHe9zR6+g9D2phs66\nDUSuUpaXpxpJ96WutfNH2WcNkV9IHZu3p87Jv5lq2BxIfV/npY7j6an685jUVOQf997/RioAfkHq\n3Jhlyr8qyx2C16cambOfv5rkH6fOi6dTdc1Dqev/jCwv0fON1H3hltR5eU2qI/KD8Zo/HsGHC1tr\nt/ber22tfWHU1a9ta5gVMeq9L4wG2/zxvSY1UPKlFc8/NnX/ennqXnNlkr8Y3+Gfpq7ZB8dn+laS\n30p1EN8xvrszxmf5xnj9w84YG5/vl1Lf85tTx+MTSX4ttZHXhaNDfMYozyOpa+e61Pf6vdR9/kej\nLD9Mfa+vG5/p+NSA8h+Pz7qU2kh0NoD009T3/9+S/GZr7ffnrpmXpM6Va8bf/63UoOIJbTnz/g2p\nuuLeVJ18YqreP5C6rz4vG3wcjwtSddEp478PpO4DXxp16vPWwu416LdnvPZZqQH5x1Ntp5+M6/i6\nUfaD3bffMD73qanz822j/C9KnZ9Xpq6pc1Ln8Umphv1XV3u9w9WXZ3e9K3W8Lkwd96+krtufZUzV\nG+/98Pi8Z41y/3h8B6ek7o+npOqeS1Lf/VKWZ9TNsos+Nz7X/eOx08b73Jv63u9PZT1+tPd+/uis\n/bPUYOdlqUHbU1P1zd3j720ZjQ4AABz/SURBVM9IXev3Jjm1jUGU3vtl472eyXKw8anUsVnTwM54\nnWtTCRevW3Et35XkganA7LgnXjPKfV3qXLs1dY1cPr6nJ5L8j1QQ73Cyjdda9pPHex2fOrZfSl0n\nV6eO82tT5/8ZqWv43alsqVel6tFbUm24z6XuyxeOl34q9X3enGprP5k6V5L6zt+bWtrus3Odsdn1\nPKtbLx/3xuNaa0+sKPfF43U+kTr3zkxyVxvJEb33K1Md2k+s/N56ZYW9NFVHnJcKeH9ntXZWrxkJ\nJ6WCrB8a58zFqXrp9labF87X4ReN7+UFB7mufznLfYJvjO/oQKrd8YpUX+adqXbYu1trH5z72/3t\nyLJlJ/Ua9E3qHHhpapbK060GhI9PLfFzQep6Oi7LfcUDqfvzjanje2mqrf1YlvtXs3bcJ1Ln+r5U\n3fn4yj5Pr4HG2aDYD3oFN59Kffe3jedcM977J6lBwef0g+fauj+XGsT6o9SsyZUDGick+WdJ/m3q\nvJ29zmun2toT391xqWN2b5KHRjDlzPG9nDE+68og7HGpOvz4LA86zK6be1LnxN7xuxemrsl9K6+B\n9TDK8k9S7eefpe5Te1P3yKXx/t9KclGr6fNnjc97fuqaf2mqrj9v/O31o9w/SyUA3Z66Tj+V5DdT\nCUO/21pbLXHoedf5YXyOi1L17UtS9cyxqQH3h3rNonosVZd+va3IkjzYPXiV99mfqreOT303n8xI\nhEvda65Pfe7rstzeeTRVx38zVS989Eg+4+HqNQj8pVTf875U/XJM6ly9OXXfe1Xq2L98PPZY6lq/\nZfz3YOrz7lvZV5p4z2NSS6V9be6xt6Ta3cemBnPvTtUVJ2e0HVMxlxtSdcrdqXPpgvGcn6TOx2ey\nSvt47n3OS11zJ4/nX5EalFvLJvCzNu75owwnzd/LR9t2Kq52+vibN6a+20dS18TrUu2m20fZH0zy\n1rmg7VVJzm9rTC46RNkPpNriH07Vu7Nz7u7Ud3J7lpc2Oyd1j9qb5UH2L6X27fjvqXPh6dT5/Wiq\nr/Kz3vv/lepHPZqqL18xXmN/qt4/Y3z2Wd/z3DYy6nvv546y7B3186wNfmmW+3tPtJGQMAKyS621\nv+q9X9Vau67XZu+Xp+qWB1P3om+n6vnvpuIqs/b++bPyrNI+P3e894+TvH7uOF+bSiJZ2f96cWvt\nhyOmuDfVDpr1Ox9KnTOnpTZBvKtXUsxj4/FPr6xv1stRBZEPZeXJ3muk7IlUB34WFDk91WA9OfXh\nZw25k1MnxV1tk9ZL65WVOrsRX5g6qWaVwUWpyuy41Al6R2r05H1zf/+8htVoRNyZOtnObGN9v9Eo\nujj1+b+c6picO977sdQF9v5W66i9OXWB3ZW6cN6ROmlPT91EfpA6qU5LXRzPy/DqFYQ/Y7zGC9oY\nFeo1YrovdWE9kOr4/l5bzpK9ZLz2w6kb9T3tIGsUrmjI7k91tGbH9G+nGjM39zE6lapskgp43znO\nkb2jnJdk+eL8Uaphc8x6Xwy9999K8mepRsxfpiqIe7PcoTs1lYXxtlTF8XTqon1xWzFFoFem2WOp\ninx247k+VRE93SuY/2Tq+P4oNeXgL3rvr26tfa33/o9SgaljU4HK2Y3ostT1sjd1Yzg31UC4NHVO\nfHX87plVGovHZ3mJkzvnGsK/kDp/vpS6Jm9LBTp/nFqv8a97729srX1uPP/a1tqqa4iPoM0ZrbUb\n5h57Z+omfGIqUPu/pY733tT5/ufj/zekrq+PpYLG/3nuNQ57Gu6hzL/maLy+s7X2F+PnS7Pc2T8m\ndZyeSF33t8w+3wiCPpK6tpdSDZzbUw2Gz2dkVIzAx22p4/T5VEfx4XFt7EndcO9PDQpcPv79hvFa\nswGL2RI1j6aO04OpTs3eJFnteh9lnI1Mzn/e00dZzmmtfXg0rGbZKw+mbjhfT3XSP9OWl36Zv65f\n31r70ir1+4FUPfGaVN10e1tlkGKzjQ7fPanGyKwTeWuq/vlWapDnu6nv5Xup7/YH8+ddX17T8u2p\nhvAlWc6+/2mrAO6eJL+aOs6Xjj/90Xj+1anz6fRUp+ey1P3twdSx3Z86z/ZnOdP70dR596Ikf9ZG\n5tTo/B9orf3RqFO/m8psmU1lfmvqvjk5jXCU9S2ttU/PvqN26CDy28d39h9TDb1Ppeq576fO+0+l\nAsp/kgrgfiE1CPfeVODu2CTfXFk/HY3RaXtZqk7cm/q+nkh9h18cjx3fKgNpdgz3pa69s+Yai/tT\n63rePb6ba1PH9slUO+BA6n5wXqrh+tupoNorxnvOOo4Pp86xN4/v4w2puuS21P351NS1vS/LA39n\nJ8lU0GC0Ia4bZfpIat3Zn43g7uXjfd6Rqk9/OZXt9sJR3n3j+R+ae73fTGWNvHJlB2Xuu7g6I1t+\nvMZpWR4w/e74zm/KcqD9qlQdNr/3wIbovf/z8Vn/ZmqQ4hWpTtI7UufcvnaQAYrx+V4xyv3N1DF+\nXepefV/quvv11HV8/rgvz4Kbszr65tQ1/kyqXXBrqu54Qep7e0WqrfBM6vjemWrn7VktQDE6FE+P\nxv/sPH323rvG7+UNrbXPz9+nR/vu1vGd/GTF81+Tauecn2oDPJU6jt9L3RM/3Hv/3VTG2oZ0QFaU\n5x2pe88ZWQ78/DAVyPxiqq1yQur6Xkp913+Z5GVtley28ZovS11714zXezzVdn916rp5WypY9ros\nT+k+Yfz7QKp+fiAVwH1pkv+Smtr6kVHGx0d5jslyfZEsd2j3pmadrXpNjD7Ha1OZ/bM294Wp9tCj\nqfv0X42O41mp4OYbU/etn6bOp9kapfPX8MtT956XrlKP/0bq3Lwl1Za9Y3z+41Pnycf7wWfobKi5\nzu9s4OD21PexlDofnki1y87O8jIat2Z5htiz68WPTvxsHdG7U23QPx0/vyJ13Gbt+T2p72U24HP7\neJ8DqTbqqbP2/ujo35QKTD6c6i/OBmm+lkpQOD5Vv9x6sDpxot/4ovG6567sb4121mmp4/Z06rw8\nPXU+LyW5dtQDL0qdvxck+d7c+fX61MDMb6bqnD/tcwMX4/VPaCtmdmy0ETy7Msv9o2Q5sWPWhv56\nKjniW6l+1WnjXjirM2eBtlmCzdWp+/UzqXrt/0jyn1KZ359O3SdPTZ1HV2T0o1tr7xvfw1Opfs3N\no4yz+MB9rQLDe1J9tPNTbbqHUnXof0i1EX/a5gYOeg3Ev7Ctkjix1iDyOKcvS7XPl8b39oYsB9Pv\nTq1p+99HXfKzJL84+pnr3p86XHPH6pjU5zgjVZedmbq+Tx+P/2T8ezYYcEKWE3x+OB5/IFVP3ptq\nc96QOmcuGf//WpK/kTqHHk21325LBQo/s6Jcb0vdo1+cul6eGI/vTV1Xb0u1D05LLal40GPVx0yx\nvpwB//OpWekHTZoZ7e/jUsfztSvbaCvq+WNTCX6fGJ/5nNbaB3otJ3Zrkn/QWvuDg73feJ11Oy/m\nyvmqVJ38jdHm2pvqJz+duq5uTV0rD6fu7/tSfbFZXOOBuXbMvlTyyB2pevnqWZt2fAdnps6R16WO\n1c3j9a5NnSsvGO/5dKpOPD1VX1+Y5Q2lH85yAuEZqTrm/IPEPGYDd4/O97V6JRfdljqn35WqE+5K\n3S8eTh3bp1L1zZfa2pN4fmX8/U1tBKR77+8Z77OvtfblPjcgOr6Xv5Nqv21YoHdTgsi9duieNbSP\nSX3o01NTB5d6jQakbfL6wYdjVHhXpk6Ei1uNSKzbbvHjO3gq1TF6f3vuWnTnpyqHb/Te/0WSP0jy\nc6NxeUzqgvrqCGAeaK399BDv9dbW2qfGv49PdX6/mcoAfl+qwb0nyyP5j7XWPtZ7/5epAPPkKO2K\ni+HNqZP+gVQQ54rUyf65caHcnLoxzLL9fpxqIL8/1cD5ynxQcqP1uc2lRpDw1akRsdPaOq2nOCqC\nj80aFn2MLh3ma+xLjcjftA7leWOqUrs51Ql/b6vMjytTnZYzUo2w16cqvFWnsI2bxIva8lTh/RkZ\niyPA9r+nAvVXjU75mqZiL1qvNSv3HenxH53EB6Yq8V6DKfelgvc3phooX06yv7V254rn7k11ZmdL\nSzyR5IftMHfEHZ3176WO6V+P17wjdcP7XKqRuzITaj5rcRZEfv38ja7Xci2PpK7fU5PcvZE3r/XS\nx/IPvQYuH16PMo9O5lJ7bpB9bypQ+fCK5x6baiB9MHVsb091Qr+XmjZ+24rnvyDV+Pli6hienOR/\ntecOwF6RGmg6NmPK0zgXz01d02cl+WhbXt9tdq8+PtWwO26uHn9pqlF/w6yxtKKu3Dc+11HtJ7Ae\nRqfuHW2VTWI26P3eOe7Dr04FyFebintK6l4yy179/orfvzzVKT2sXer78hq1b0sFBX45de1dmsp0\nOlidc3qSrOygjH+/OdUQ35MaCPrhCMbdf7hl3Kp6ZZCeu7KhfgSv8/eT/HFbkegwrsEnUgH8I8rc\n7cszpL6dqg/em6oPnlrxvCtTbbhPj87qfEDomlSw5ey2POvvklSb7IrUeXBz2ybrVo52xYWtMoPX\numxP1vrcvpx1fEmbyxobAbkfperpz6SWlfjI7LVTQa+7M+71c3XwE+0INlDrNavhjFS77HeS/NdD\ntff6cwcPrslyVvr8PXp/qn6/cau3v3rNWPtUqu9z/aGev8bXvKjNDab03i9rrd3Qa3B9f2p21V/0\n5TWMZ5vHXZ0KPpyYCljcPtFGujmVGHFPO4oNu8d97LdTAZC9qfbUzam22mmpftXT498PtbklTvry\nzL/ZursvHOWdLa/2SxlLamyFe/ZqRoBmtnzhxVOBnDW8zkH7Gb1mRT+dGoiaJZK8PBVIXEoFHmez\na55KtdX3ptpft6UG+Gcbxn7paL7Pwwgir1vcYasbbd3HMwbo25jdNIJnN6fOkftTAyVfHz/Pkus+\nlOSfJ/nXSa6c65uelLqPHla2+bievps6F+5bec9f42u8LRUkfWdqkPrKNmZ4zNqQqazUZ+/fhwgi\nX5sKUF7R5hIFtqpeg+U5VJtoHKMT24rl/pL8ndbaHx/B+87q9ztSgw33pa7nb7XlGdvXjqfPEiOO\nS83YP+xEqNGGPi11Ds6SMmavfU9GUs1cHG5lEDnjWJ85yvtQRjuwzSWubgWbFUS+OpXZtWWDxNtF\n7/23Wmt/tMHvMd8Y3ZPkV1pr7++9v70dYtH0VSq4WWf0/NTI72Wpi/eYEVx8NtjSKzP2hraOu1Ie\njZUNzp2uP3/t3rekgoxvSe2+PBmsHIGkV7caDdubymT94HYIInJovZbXOKW1duNqQeS+nO1713oN\nuGxno5H7/cMdIDqM1z89NZPl2Q1OVvx+T2pA8iOpwMdpqcHbR1KBjc+teP7sXn12qoFz1vh5lpX7\n1cNtdLO5+mFsltpXZDusct/+Xmr69aZttshzjWvvmFTm658l+QepgfbHUlmY16eCGc9m7Iy/WxlM\n/Gaqk/nN8ZqzJdZuXOv5wuL0uf1MDvG8a7Iis2nFPfqlqRkEf6JddvjGAOsVrbVvHeJ5e1L9m6Pe\nZHq81gVZDmA/kMrUPSk16P/RVD1+z9zfXJoKvF08+liXpAYv7xj/fio1O2dyKcrdrldy1iyYNMuU\nnWWkvihjZlurNaT3pmYZ3zn1emt8T0HkCWPg4zNziQvP2adgZd91qxoD/1enslxfnAp2X5AaFLor\nNWh856yOWdEue84M0DHI/Ohq7X+m9RV7AMw9/s5UkPm7qaTG2dKt61GPn5BaHmnVe8cqQeSl2bHO\nKksRbSVHu7HeWh0vgLxu/stGv8F8h2ScvO8f/z5oAHkVz+4M3Fr78/HY3b0yq9+Wmno6/5xNyR5b\nq90UQE6SlTfhtjzd55CL07eanjTbwGGWFbVlKz4O212pRs/zOh69MlwfbJs4a2Ab+HGOYnfdQ2k1\nTe63k/yrid8vpQJP6b3/WVveeOWOVEN1yqmpUfozx8/npabgCSBvcUcQEJzaDX6pHWSTXTbHuIaf\nTM0OS+/99+c6zccm+bXW2p+u8qd39t7PmsvieTzL0zSvTGVCrXmZDBZrLQHk4cepWQjz7bj5a/zk\nrZbFtJ20Wg7ioAHk8bzZdbse77mU5U2W5jchv7/3/t7V2tittZtm2WzDbGPNpGZf7KoA5JEYQaZZ\noGk2E2w2y2jWzr1nPPeZ1NI1bJA29gSa+/n2FT9v+QBykoyA5GzDzOuSpNcmmrPz53A2q3xGAPnw\nrRZAHj6e5y4Hum5LMY7458HuHQdri2/pOMpmBZGnviAO01Y/oWZGQHEptVzFczqkrTahmQWVZ5sM\nsXOc3MbGMuwMbXnttdVcnlp7jKGt387lB/OnbQ1T6mb3jLY8Zf1gG9KellqLbma29jq7wMhw3/Uz\nCbai+bbf6IyuFkBOKpj4qow1WkfdPWuDH2gbtOM9izUyTa/Nc4PI6XM7ybNzHMYxnW3ADGwxh5HB\nLo62gdqC1wqfsOWP+VRQAI7Wxak1iz692mjZXGb651MbA7Jz6LDsTFMjuHu26A14R2sH2TzsCDwz\nBgmOXZF1fFzbhE212DIuTe37wDY16uKptr16emdb2fZ6PLW2I7vP7FyYbQAM7Bz62TvXlg8ez2xW\nJrKTffc5L7Ur9UGP/Voy6YAt4cmx4Qk7z+2pOpvdY7V788pBBLanPWPJi6mBP3amWedzdm0/mNp4\n1UDg7vVklpezYRsb7W/3Z9i5nl3idTvYrEzkbRNVZ/2YQrfruM53tltTm0Cs5Lhvfz9NHduVdbY6\nfGd6NLVxEDvXKXnuOqqJunqnm9XXs+P8UCqIzC6lH7ajXJIN3GuDLeeR3vtJKx5zD2fLsJwFsN7c\n5Hamu5KcNfez47xDrDIFfs/cOqrsMK21b7XWPjv3kGO985yaykRNUruSx3IWu81DSU4eSxUJJuIc\n2N4OtNbsIbR7fDfJyyd+p822cyxN/HvL26wg8rb6UlgXjjnsIGPpGQOPO9d8nf1EZKrCdnYgy5sk\nLqWCyvdPP50d4LHe+4lzPz+aZH9qw1QbZu5eS5a32fLWEhQUONxFRp9rqfd+fOaWMXEt7zxzSTvb\n6hq3nAXrTtbDruWY7w4r111k53k0yYmHfBY7hWt555nfFHNPKqgsi21nuy3JC5I8kzy7lMGeJGcm\nuWeB5WJz3ZvnH++zkty5gLIAR+e0PHcAeH6AmO3v4STPWbZku8wE3eiN9QQbdqcXJLll0YVg022L\nSg84pEdjR/fdRN298x1IcvOiC8GGujvJG5N8c+6xpdSx/9FCSsSma61dv8rD5yT53maXhTVbS5zE\nfXr3mc0iumfu59NjQGgnuT3J+UmuTx3fbdP/2uhM5JWbPLA7nJPkjkUXgs3Xe9+XkQXDjmVQcOd7\nLDKRd5Uxg0jdvTM8nud2QpaS7GutmQK7g43M4/Py/Pb33rHuPbvTnjx3ZgLbzFjTXv29Oz1nf4M8\nPzOZbay1dneSM8aPe5I8ktoYecu3xzc6iPx47/2s1OYO7B57xlo+7D5npLJh2Jn2p0ZJ2Xn2ZHmA\nYNuMhLMullJ1tynvO8NNSS5d8Zhkjt3h6dbaYysec+x3NwP/299lSW5YdCHYdI8mOa219uTcY2Is\nO8/S3BIWj6Qyk7f8QMFGB5FvTPK3kvxwg9+HrUNjdXc7J8nPFl0INsyezE2L3S7rNrEmP0tNe05q\nja7Tk8he2z3OjimSO0Jr7f4k/3XR5WAh/tOKn+cHB4Ht6bRRr7O73JrkwhWP6XftTMenZoE+kloW\ndssndWxoELm19mCS95lCs+uo4HanPUlObq09vOiCsDFaa5+YO76PpDZrkZm8A7TWbkry+fHvZ1KN\nmNsWWSY21Skxa2zHWJG5lAgk7gqrHHcAtqf7UgkdMwYFd65TkjyQ6ltfkG2weeJGZyKntWY36N3l\n6Wz8ho1sTW5su8s9SV4em2juGGPgd+bcWNt+VxlrqrLzGNjfvfbE8cc5sN25N+9Co032ybmHluJa\n3qlOTfLgGAg+fjvsY7DhQWR2nZ9kG6zjwoa4NzUVg93h3iQvzjYYLeWI3C2ouGs8nOTkRReCDaXj\nuTvtSbJv0YVg4Vz/sA211r459+OdqRmg7DynpjKRk20yaCRjlHXVWrsjstd2pdba9YsuA5untfZY\n7/0EgcadqbVmTdXd40epqXTsTLKXdq8vxiapJD9ddAE4Mr33EyNBh7LaGslsf0up7OMnxs/bIslX\nEBmAIyXDCba51tojGethsyMJIO9SY337RxZdDhantfalRZeBo/LSJN9adCFYvBFk/Myiy8G6uyt1\nnc98ZFEFORzbItINwJb0h4suAAAHdV0SM4UAtqje+9Rg35lzGYrAznNbajO9JElr7fsLLMuayUQG\n4IjYOBVga1uxYSYAW8uTSY5N8pxgce99X2oTa2CHaq093nvfdstOyUQGAAAA2FyPJzl+lccvTvLj\nTS4LsPk+tOgCHC5BZAAAAIDNNRVEPju1Xiqwg7XWblh0GQ6XIDIAAADA5poKIqe1trTJZQE4JEFk\nAAAAgM01GUQG2IoEkQEAAAA212NJtt3GWsDuJYgMAAAAsLlkIgPbiiAyAAAAwOZ6Msmx8w/03i9I\n8tPFFAfg4ASRAQAAADbRxOZ5l7bWfrLphQFYA0FkAAAAgMV7ZtEFAJgiiAwAAACweILIwJYliAwA\nAACw+fbM/tF7Pz7JEwssC8BBCSIDAAAAbL75dZFfluS7iyoIwKEIIgMAAAAs1jGtNZnIwJYliAwA\nAAAAwCRBZAAAAAAAJgkiAwAAAGy+pUM/BWBrEEQGAAAAAGCSIDIAAAAAAJMEkQEAAAA2355FFwBg\nrQSRAQAAABZLQBnY0gSRAQAAADbfUpL03k9O8vCCywJwUILIAAAAAJtvln18bpKfLrIgAIciiAwA\nAACwOGckuWfRhQA4GEFkAAAAgM231Hvfk2RPa21p0YUBOBhBZAAAAIDNd2+S0xddCIC1EEQGAAAA\n2Hy3JTl/0YUAWAtBZAAAAIBN1lp7JMn+LG+wB7BlCSIDAAAALMaeCCID24AgMgAAAMBinJ3kzkUX\nAuBQBJEBAAAAFuP+JD9adCEADmXP0tLSossAAAAAAMAWJRMZAAAAAIBJgsgAAAAAAEwSRAYAAAAA\nYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJIgMAAAAAMEkQGQAAAACASYLIAAAA\nAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJEBkA\nAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgki\nAwAAAAAwSRAZAAAAAIBJgsgAAAAAAEwSRAYAAAAAYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAk\nQWQAAAAAACYJIgMAAAAAMEkQGQAAAACASYLIAAAAAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAA\nmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJEBkAAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAA\nAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAAJgkiAwAAAAAwSRAZAAAAAIBJgsgAAAAAAEwSRAYA\nAAAAYJIgMgAAAAAAkwSRAQAAAACYJIgMAAAAAMAkQWQAAAAAACYJIgMAAAAAMEkQGQAAAACASYLI\nAAAAAABMEkQGAAAAAGCSIDIAAAAAAJMEkQEAAAAAmCSIDAAAAADAJEFkAAAAAAAmCSIDAAAAADBJ\nEBkAAAAAgEmCyAAAAAAATBJEBgAAAABgkiAyAAAAAACTBJEBAAAAAJgkiAwAAAAAwCRBZAAAAAAA\nJgkiAwAAAAAwSRAZAAAAAIBJgsgAAAAAAEwSRAYAAAAAYNL/D1Qk9RY0fA4lAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1800x360 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABZEAAAA0CAYAAAD7XnY8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAXEQAAFxEByibzPwAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAADHUlEQVR4nO3dMW4VMRQF0DvAQqahYFkkZB0R60AJ\ny6KgmY18mSJBAiUPvmTlz7fnnHJeY+m6sK5G9tJaCwAAAAAAvObd3gsAAAAAAOB6KZEBAAAAACgp\nkQEAAAAAKCmRAQAAAAAoKZEBAAAAACgpkQEAAAAAKCmRAQAAAAAoKZEBAAAAACgpkQEAAAAAKCmR\nAQAAAAAoKZEBAAAAACgpkQEAAAAAKCmRAQAAAAAoKZEBAAAAACgpkQEAAAAAKCmRAQAAAAAoKZEB\nAAAAACgpkQEAAAAAKCmRAQAAAAAoKZEBAAAAACgpkQEAAAAAKH3YewHAWJavy8ckt0nWJFuSh3bf\nfu65Jt6WzOcj0+OR+fxkfExyJ7EPhrK8zCpNVsAYltba3msABrF8XT4n+Zbk/R+fT0nu2n37vs+q\neEsyn49Mj0fm85PxMcmdxD4YylJnlSYr4PopkYGzPP/h8CN/H3p+OyX55I+Huch8PjI9HpnPT8bH\nJHcS+2Aoy/+z8kcycO3ciQyc6zavH3ry/P3mgmvhMmQ+H5kej8znJ+NjkjuJfTASWQHDUyID51o7\n54xn7ZxzfdbOOeNZO+dcv7VzzpjWzjlzWDvnXM7aOQfYnRIZONfWOWc8W+ec67N1zhnP1jnn+m2d\nc8a0dc6Zw9Y553K2zjnA7pTIwLke8nRf12tOSR4vuBYuQ+bzkenxyHx+Mj4muZPYByORFTA8JTJw\nludHOe7y8vBzSvLFox3zkfl8ZHo8Mp+fjI9J7iT2wVDav7PyqB4wgqW1tvcagIE8vwJ9k6d7u7Yk\njw6oc5P5fGR6PDKfn4yPSe4k9sFQlpdZKZCBUSiRAQAAAAAouc4CAAAAAICSEhkAAAAAgJISGQAA\nAACAkhIZAAAAAICSEhkAAAAAgJISGQAAAACAkhIZAAAAAICSEhkAAAAAgJISGQAAAACAkhIZAAAA\nAICSEhkAAAAAgJISGQAAAACAkhIZAAAAAICSEhkAAAAAgJISGQAAAACAkhIZAAAAAICSEhkAAAAA\ngJISGQAAAACAkhIZAAAAAICSEhkAAAAAgNIvSnVGALWvNOMAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1800x30 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABZgAAAFQCAYAAAAyWRsOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAXEQAAFxEByibzPwAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdeXxV1b3///fJyTxDQhJCgEAgYQij\nBEQEAoIgFAsOtbUOj4q23uqttrV99Pb29vvopPZqe+tQ69wqiiKCKIMMMocpQCAQkhCGJGQCMpyM\nnCQn5+zfH/zOLpFBOGQA8nr+48OT4Syyz957rff6rLUthmEIAAAAAAAAAIAr5dXZDQAAAAAAAAAA\nXJ8ImAEAAAAAAAAAHiFgBgAAAAAAAAB4hIAZAAAAAAAAAOARAmYAAAAAAAAAgEcImAEAAAAAAAAA\nHiFgBgAAAAAAAAB4hIAZAAAAAAAAAOARAmYAAAAAAAAAgEcImAEAAAAAAAAAHiFgBgAAAAAAAAB4\nhIAZAAAAAAAAAOARAmYAAAAAAAAAgEe82+OXWiyWk5ICJRW1x+8HAAAAAAAAALSJ3pLOGIYR48kP\nWwzDaOP2SBaLpdbPzy8kISGh1esNDQ2SpKCgoDZ/T1ybOOZdF8e+a+F439g4vl0Hx/rGxvHtujj2\n4DNw/eGY4UL4XHQNnXGcjx07pqampjrDMEI9+fl2qWCWVJSQkDDk0KFDrV7csGGDJGnq1Knt9La4\n1nDMuy6OfdfC8b6xcXy7Do71jY3j23Vx7MFn4PrDMcOF8LnoGjrjOA8dOlTZ2dke70TBHswAAAAA\nAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAA\nAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAA\nAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAA\nAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAA\nAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAA\nPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADw\nCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAj\nBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8Q\nMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELA\nDAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEz\nAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwA\nAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMA\nAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAA\nAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAA\nAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAA\nAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAA\nAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAA\nAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAA\nAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAA\nAI8QMAMAAAAAAAAAPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAA\nPELADAAAAAAAAADwCAEzAAAAAAAAAMAjBMwAAAAAAAAAAI8QMAMAAAAAAAAAPELADAAAAAAAAADw\n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\nR/v27VOfPn1UUlKip5566orutRaLRX379tX27dtVVlam7t27X9VnoLq6Wvn5+W06ud5WbDabfHx8\nlJOTo6qqKu3cuVOhoaF69NFHzT60YRg6fvy44uLiZLVar7jfUVRUJOnstbZfv35mcVdgYKC5EuxK\nuPt2+fn58vHxUVpamoKDgxU7CrIAACAASURBVLV//36NGzfO3A7jkUceUY8ePa547DNmzBj1799f\nr7zyivbs2aM5c+ZcdN/m653dbpeXl5f5+S4qKlJERIQ53vTy8pLFYmnzgqCLaW5uPm9p/LRp0857\n76eeekphYWHn9YssFot+8pOfyN/fX3/+85/1+eefS5I+//xz3XTTTaqoqND06dPlcrkUGRl5w+zX\n7F715ePjo8bGRr399tvm19xFN4WFha0C5ubmZu3Zs+eK+5erV69WYGDgeQHz1UwW1dTU6ODBgxo9\nerRWrFih7t27KyMjQw888IA2bdqkiooK/frXv9aRI0eUlJR0WWOWxMRExcXF6YUXXtDSpUuVmpp6\n1f3yttBW23Y4HA59+umnuvnmm7Vv3z5VV1frBz/4wXnH0uVyqbCwUP369bvs352RkSFfX1+zT+5+\nv88//1yJiYkeB9kOh0Pbtm3T+PHj5efnp0OHDmnMmDGKj4/XkCFDPPqdF9NuAXNLS4u6det20RnL\nKw2dbDabgoODzdm8w4cP69SpU9qzZ48sFosiIyO1aNEiWSwWGYahcePGXVGw7JacnKy0tDT17t1b\nCxculNPp1Lp16yRJ//M//yNJ33iRr6+vl5+fn7m3a35+vpKSkvTnP/9Z06ZNM/euiYuL0/z5880L\nk91uV2ho6Hmh7rn/757JzMvLU1JSUqvXL3aBqqioUFlZmXx8fLRo0SL17dtXhYWFks7uR7t3717d\ncsstZjuqq6v1y1/+Ui+++KIaGhrk5eUlX1/fi3ZqVq9erf79+ysxMVH19fVmp+hc3t7eZihzOTdJ\nm82m8PDw8/5Nb775piZNmtQqJKmqqtJXX32luLg47dq1Sw6HQ/Hx8frqq6+u+IF9AQEBCggI0OOP\nP66ysjLt2rVLzz//vMaOHXve01DdYXpWVpZiY2NVXl6uhIQE2e121dXV6eOPP9att96qTZs2yWaz\nKSUlRVFRUeZxls5+VoKCgrR8+XIFBwebkxjuG0dVVZW6deumgwcPSrpw1c+53H/fc4P+8vJypaWl\n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\nzDAyMlJbt27V0KFDtWLFCvPvGRISouDgYLlcLp06dUrx8fHn3btvueUWuVwuZWVlqampqdX5755s\n/ibusNrPz0933323Wbni/lxt375dW7duVXJyskpLSzV16lQtWbJEzzzzzGX3c/72t7/p3nvv1T//\n+U/97Gc/086dO5WRkaFx48YpOztbP/rRj1p9/9GjR3XixAn16NFDq1atkr+/v6qrq817y7l/04kT\nJ6p3794aMGBAu1T9GYahP/7xj3K5XOZe7BdzbiDrvp5PmzZNtbW1uu2229TU1GSGtKdOndLJkydl\nsVhaPUjrQlX7wcHBSkhI0IkTJ8w9snv27KmysjJzEuJb3/qWuQfxtm3bFBAQoJKSkvOu8REREQoP\nD1dTU5NsNpuGDBly3ko7p9OptLQ0bdq0SYGBgfrRj36k4OBgbdq0SYcPHzZXxt19991asmSJqqqq\nzPuWl5eXgoODFRISoqioKN1555166623dNttt6l///5asmSJWRkfGBho7p0qSevWrVNlZaWOHz9u\nXr/O/VsMHz5cx48f1+zZs1VYWKgpU6bo8OHD6tu3b5vuGfx1TU1Nstvteumll1q9ft999+mLL74w\n74vuv4G7Mt9isWjo0KEyDEPTpk3TggULNHfuXFVXV6u0tFQ7d+5sdXxCQ0PVp08fZWVlmX3s2NhY\nxcXFKT4+Xp988olCQ0PNib8TJ04oJSVFu3fv1sMPP2w+oO7cCUtfX1+Fh4drxowZ8vHxUVZWltLT\n081K6ZCQEKWmpp537jidTv3zn/9UUlKShv1/7d15lJT1ne/xz1NVXdVbVXf1DggNdLPZbA3CKIsI\nCoaAiArjYcxo5sSY3Jl4YjyjcTJOcid/ZO49Tsz1ZpzEZCYnM0a5ioJjnBhDiELccEVRgWaVxaa7\n6b2rl+ql7h/N80s1dGNbNl3L836dk0PApuuhv8/ye76/7+/7mzXLjNn37Nmj/fv3a86cOZo6deqA\nyeru7m4dOnRI06dPV2dnp2pra7V582bl5eVpw4YN+vnPf6577rlH//Vf/6XDhw9rzZo1evvtt/Wl\nL31J0p+Kj37zm9+opqbGjDFmz56tjIwMdXd365133tFdd92lnJwcdXV16fXXXzfn0MWq+t2yZYv2\n7dunSCRy3jjILqCJZj97/uzP/kx5eXk6ePCgDh06NGASL5r9fhv99wsKCjR58mSVl5fryJEjZnOz\n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\nYtitioqLi83eFlu2bFF7e7vcbrdpnTV+/Hi98sorOnPmjKnek/qfTytXrjwvkRjN7Xaf1+5K6m8d\n8uyzz6qqqkqlpaVm6bWdvN6/f78ZB8yaNUt+v1+bNm1Sdna2MjIydPTo0UGf5ZLMioz09HRNnjxZ\nS5YsMW0S7Ofh8uXLzRjN5/Np2bJlMUZ1+DZu3Kjm5maT1Hv88cdNkc+mTZv0wQcfmBUiRUVFpoWd\nvXx+4cKFqq6uVjAY1JEjR+TxePTqq68qPT1d69atU0ZGhv7whz/I5/MpEolozJgxeuyxx1RbW6vX\nX39dwWBQgUBAeXl5euyxxyT9aQK5srJS7733nplM3b59u2ntEW3+/PkKhUKaOXOmpk2bZlb7STLL\n5pcvXz7o88luMflp9u/fr+7ubt1+++3mefvJJ58oLy9P4XBYra2tOn78uCoqKsxKtKqqKrMSW9KI\nbEI3XNGtQCTpvvvuM/+/vb1db731lubNm2fajNbW1qq6ulrNzc0KhUKmCri6ulq33367adU0lGef\nfVZSfz7Hfm+V+p+NnZ2dysvL08mTJzV//nx5vV6zEn3ChAnm/aW3t1fBYNCsapk9e7a2b9+uI0eO\nqKSkxLwLDcayLOXk5Jj7kF18VlBQoK1bt5r9F/7iL/5Cjz/+uO655x5lZmbq9OnTZjXpwoULtXjx\nYv3rv/7rgJZm9mS4fW3bxU2PPfaYysvLddVVV6m4uNgUFzY0NGjZsmVmXGFf09HvjMFgUN/61rc+\nLYzDkpmZqdtvv12FhYVauHChTp8+rYlnN7OdMWOGXn31Vb344ov6y7/8S/l8PtXU1Kiqqsrsi/Ty\nyy+bf9uOHTt02223ye/3a926dfrwww/11FNPaeHChcrLy9PMmTOVlZWlQCCg++67T16vV6WlpfJ6\nvWppadHEiRPV3NysKVOm6NFHH1VXV5fZU8cujBszZoyuu+467dy5UwcOHDDvd3ZRjySzaaqtuLhY\nxcXFWrZsmT755BMzHrXzQGvXrtVTTz2lLVu2mAnMkpIS/eQnPxnwswoGg5o5c6a5H9nv4nbyvbOz\n07RcqaiokMvlUmdnp7Kzs02v+g0bNigcDmvMmDEKBoMDVkHYE6Y33XTTiK4OPlfcKph/9rOfadWq\nVWbWatGiRZo7d66am5t1ySWXmAtGim1X9NFmJybswdsHH3xgAj8S7B5rPp9vwGYH3d3dphXE97//\nfeXm5po+hD6fz/QyljRk+4poBw8e1Pjx480Nsr6+XsFgUM8884zKy8tNonvy5MkqLCzU7t27tXTp\nUjPAX7t27YDvFx3zBx54QLfffruCwaCeffZZvfvuu6YSxuVymUFBXl6eTp8+rWPHjmnixIlmOZTU\nf0Oura1VSUnJsHrZjJToc9C+sK+77jpVVlaO2Ll54MAB9fb2mh5Hzc3NMSVcYv175/r4449NL9Yn\nn3xSs2fP1vr169Xa2qoHH3zQVAh5PB6VlJScN4lix37OnDkmeWZf7z09PbrxxhuVnp6uV155RdOm\nTTPV+vYNO9GveelPSw1j8Wn3tebmZmVkZOiFF17QtGnTtHfvXn3xi1801RGDfb+mpibt2bNHCxcu\nlMvl+sxJnSNHjsjv92vnzp2aN2+eSktL5XK5tH37dl1xxRU6ePCg5syZM+Dzjx49qu3bt6u8vFwn\nT5401++KFSs0efJkHTp0yAzKr7vuuhHZtGq0nNv/fiTOyR/+8Idqa2vT9773vSE/K/rPtm7dqnXr\n1ikUCikzM1P//d//rWuvvVZtbW3nbcRpV6e++OKLqqur01e/+lVFIpEB/W3r6urM0jSbPVkm9b8I\nLViwwEwg2KtJ7DY/c+bMUWZmppYuXaoHH3xQ7e3tmj17tknS2WOKkf65jYRjx44pLy/volbb2fbt\n26fx48erp6dn0M1wpD/1WisqKtKhQ4cGVBNK/Uvl6uvrNWXKlM/8+ZFIRIcPH1Z3d7eefPJJlZWV\nae3atabn8WBCoZAefPBBFRUVye126ytf+Yq+//3v67777pPP59MjjzyivLw8ffTRR7r33nuVkZHx\nuY4xEbW3t2v79u3mfI7Vm2++qZKSkvP6kNrXw+d5dhw9elSPP/74eSssJk2apPT0dBUWFurYsWNq\nb29XSUmJLrvsMpWWlpoWAW63W6+//rpuuukmPf/887rrrrsUiUT0k5/8xFQDrlixQm63O+4bXH4W\ndmuXz3rPGc7Xt7S0KCsry+yzYH+93fbt2LFjysnJ0ccff6yKigp5vV5FIhHTTiP6fnj69GmzNPaz\n/mxbWlq0c+dOLVu2TD/60Y80c+ZM3XTTTRf8Oy+99JI6Ojq0evVqPfbYY2pubtbs2bPV0tJiCiT+\n7d/+TVlZWbr77rsH/PsS0bZt2/SFL3zBtPoYCedejy0tLcrOzjY92X/7299qyZIlysnJMe117E0s\ns7Oz9fTTT2vs2LEqLCw04zSbvdrz+PHjeuutt3TXXXd9rvZAO3bsUGZmpn73u9+ZPXVyc3PV19en\nBQsWaMeOHeZr//qv/9q0TNy9e7eOHDkiy7JUV1entWvXaseOHbr99tvV2NhoWlGuWrVKV1xxRczH\nd7HZ7yUvvPCC1q9fH9P3+LRr3t4TYffu3Vq2bJkyMjJUX1+vRx55RPPnz9d7770nv9+v2tpaTZ8+\nXWfOnFFeXp6qqqrM97CLzc5NRH1WP/7xj03blgtVMNurUYezwXmy6+npUUtLix555BGFw2Eznn7q\nqad0+PBhrV+/XnV1ddqxY4cuu+wyVVRUmEmF1atX65lnntH06dM1adIkMzEvxTZebWlpMXuxxOrd\nd981CXBbfn6+srKyTDWt2+3WV7/6VRUXF+vhhx/W+vXrdeDAAe3du1erVq3Sli1bdO+99+rAgQN6\n5plndM0116ihoUGXX375RelXPZJ6e3vV3Nw8rHYNg42ddu3apVmzZg17I2GbfR+XpPfff19vvfWW\nNmzYoKysLPNseeihh9TU1KR169bp1VdfVTgcVktLy3nvcMNx8OBBvfHGG7rqqqs0duxYHTx4UJs3\nb9b1118vr9ernJwcvfPOO1qxYoWysrJM3uzdd9/Vxx9/rOPHj2vdunWmpWZ5ebnGjx8vj8ejzMzM\nz7S596dJ2gpme+a0o6NDU6dO1cqVKyUN3rQ9kQc6NrsCyD4hR3pW37KsQRMzaWlppupq4cKFKigo\nGDArHn2xDeel+tyXRLsy3O65W1BQoGAwaBJX9kyL3c/xQqJny+1kxsGDBzVp0iRddtllyszM1Nat\nW/Xhhx/q6quvVk1NjQ4fPqyVK1eqvLxcPp9PBQUFcTkfoj8zOztb3/72t4fcyClWdoWULdYk8Ugk\nl6X+Vil21fO9995rBkh+v1933HGHsrKyTF+/C21Kd27cT548qbvvvtucL8k8GPo8Lwmfdu7YcbQ3\n4/u0ygLLshQMBj9X7zS7anjDhg0D/nzVqlWSNOg9KC8vT/X19Zo8ebLpI2kvM25tbdXmzZu1evXq\nz7Q5U6KIjtFIXevBYHDQjbUG+/6WZZnkgT1ReMMNN0jSoDPPLpdLEydOVF1dncaNGzegGtJWUFCg\nq666SvPmzdNrr72m1157TdXV1Wb5+7JlywZUfdnVOPbmUPb1fObMGUUiEd1///0X/Dkl0vM7uuL8\n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\n/j+dbZSEqQK+NgAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1800x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"Xr4mMTrRHLFW","colab_type":"code","colab":{}},"source":["flist = os.listdir(global_datadir)\n","for i in range(0,len(flist)):\n","    print(str(i)+'\\t'+ str(flist[i]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dhT-YQrWZAQW","colab_type":"code","outputId":"7bf06b59-e792-466c-f710-a08741379481","executionInfo":{"status":"ok","timestamp":1582664570919,"user_tz":-330,"elapsed":1230,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":358}},"source":["# l_cont, signalmed2\n","import cv2\n","#import cv2_imshow\n","save_prefix='mitdb_215_549000_553320_'\n","impathx = os.path.join(global_datadir,save_prefix+'x.png')\n","impathy = os.path.join(global_datadir,save_prefix+'y.png')\n","imgx = cv2.imread( impathx)\n","imgy = cv2.imread( impathy)\n","#img = cv2.imread(impath,0)\n","print(imgx.shape)\n","print(imgy.shape)\n","# The underlying representation is a numpy array!\n","\n","rt = 0.01\n","plt.figure(0, figsize=(imgx.shape[1]*rt,imgx.shape[0]*rt), dpi = 100)\n","#plt.axes().get_yaxis().set_visible(False)\n","plt.axis('off')\n","#plt.imshow(imgx )\n","#print(type(imgx))\n","plt.imshow(imgx)\n","plt.show()\n","\n","plt.figure(0, figsize=(imgy.shape[1]*rt,imgy.shape[0]*rt), dpi = 100)\n","plt.axis('off')\n","#plt.axes().get_yaxis().set_visible(False)\n","#plt.imshow(imgy)\n","#print(type(imgy))\n","plt.imshow(imgy)\n","plt.show()\n","#Y = np.load(os.path.join(global_datadir,save_prefix+'_y.npy'))\n","#cv2.imshow(img )\n","#plt.plot(X)\n","#plt.figure(1, figsize=lysize, dpi = 150)\n","#plt.xlim(0,time_step )\n","#plt.plot(Y)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(301, 1425, 3)\n","(52, 1425, 3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nAgAAAJT2XzP1M7CFUbSOAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1425x301 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABEcAAAA7CAYAAACZieQnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAACe0lEQVR4nO3dwWqDUBRF0WfJf5d+uZ2UIpK0SSDR\n885aowwc3CuKsFGyrOs6AAAAAFp9HD0AAAAAwJHEEQAAAKCaOAIAAABUE0cAAACAauIIAAAAUE0c\nAQAAAKqJIwAAAEA1cQQAAACoJo4AAAAA1S4PHLu+bAoAAACA11j+O8CbIwAAAEA1cQQAAACoJo4A\nAAAA1cQRAAAAoJo4AgAAAFQTRwAAAIBq4ggAAABQTRwBAAAAqokjAAAAQDVxBAAAAKgmjgAAAADV\nxBEAAACgmjgCAAAAVBNHAAAAgGriCAAAAFDtcvQAkGj5Wn5/r5/rgZM8b7vDGDl7JJ77Gc71GBlz\nJ868l7xD4v25l7hD8jWzNcMedjiHxB0SZ4bZLOt6943nDqXe/sG1lfQQS9wjceYxbs995pnHyJw7\n9RrZSt0hde6txB0SZ75mhj3scA6pO6TODWFu32g/fFYDAAAAVBNHAAAAgGriCAAAAFBNHIEH3Pru\nM+170MQ9EmfmvWa4RlJ3SJ17K3GHxJmvmWEPO5xD0qxbM5x7mIE4Ag/aP6hmeXAl7JF47q/NaO73\nSZx5L2WHxPtzL3GHhBnvMcMedjgHzy/gWf6tBgAAAJiZf6sBAAAA+Is4AgAAAFQTRwAAAIBq4ggA\nAABQTRwBAAAAqokjAAAAQDVxBAAAAKgmjgAAAADVxBEAAACgmjgCAAAAVBNHAAAAgGriCAAAAFBN\nHAEAAACqiSMAAABANXEEAAAAqHZ54NjlZVMAAAAAHMSbIwAAAEA1cQQAAACoJo4AAAAA1cQRAAAA\noJo4AgAAAFQTRwAAAIBq4ggAAABQTRwBAAAAqokjAAAAQLVvLurbZVV4rbkAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1425x52 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"wSoQz5w8a6-2","colab_type":"code","outputId":"b9ec2909-6c4e-4b18-8860-ddb4f0ae2877","executionInfo":{"status":"ok","timestamp":1582652192522,"user_tz":-330,"elapsed":5147,"user":{"displayName":"Nelson Sharma","photoUrl":"","userId":"05205859662695765719"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["img = cv2.imread('./dt.jpg', 0)\n","\n","# The underlying representation is a numpy array!\n","print(type(img))\n","\n","plt.imshow(img)\n","plt.show()\n","\n","img = cv2.imread('./dt.jpg')\n","\n","plt.imshow(img)\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\u001b[31mERROR: Could not find a version that satisfies the requirement cv2_imshow (from versions: none)\u001b[0m\n","\u001b[31mERROR: No matching distribution found for cv2_imshow\u001b[0m\n"],"name":"stdout"}]}]}